!function(){"use strict";angular.module("app",["app.core","app.lab","app.homepage","app.layout"])}(),function(){"use strict";angular.module("app.core",["ngAnimate","ngSanitize","blocks.exception","blocks.logger","blocks.router","ui.router","ngMaterial"])}(),function(){"use strict";function e(e,t,r){e.debugEnabled&&e.debugEnabled(!0),r.configure(o.appErrorPrefix),t.configure({docTitle:o.appTitle+": "})}var t=angular.module("app.core"),o={appErrorPrefix:"[<%= appName %> Error] ",appTitle:"<%= appName %>"};t.value("config",o),t.config(e),e.$inject=["$logProvider","routerHelperProvider","exceptionHandlerProvider"]}(),function(){"use strict";function e(e){var o="/404";e.configureStates(t(),o)}function t(){return[{state:"404",config:{url:"/404",templateUrl:"app/core/404.html",title:"404"}}]}e.$inject=["routerHelper"],angular.module("app.core").run(e)}(),function(){"use strict";function e(e,t,o,r){function n(){return a.products}function c(){return u.then(function(e){return a=e.data,!0},function(){return r.error("Impossible de récupérer les données"),!1})}var i="/ressources/products.json",u=e.get(i),a=null,l={ready:c,getProducts:n};return l}angular.module("app.core").factory("dataservice",e),e.$inject=["$http","$q","exception","logger"]}(),function(){"use strict";function e(){return function(e,t){for(var o=0,r=e.length;r>o;o++)if(e[o].value==t||e[o].name==t)return e[o];return null}}angular.module("app.core").filter("getByName",e)}(),function(){"use strict";angular.module("blocks.exception",["blocks.logger"])}(),function(){"use strict";angular.module("blocks.router",["ui.router","blocks.logger"])}(),function(){"use strict";angular.module("blocks.logger",[])}(),function(){"use strict";function e(){this.config={appErrorPrefix:void 0},this.configure=function(e){this.config.appErrorPrefix=e},this.$get=function(){return{config:this.config}}}function t(e){e.decorator("$exceptionHandler",o)}function o(e,t,o){return function(r,n){var c=t.config.appErrorPrefix||"",i={exception:r,cause:n};r.message=c+r.message,e(r,n),o.error(r.message,i)}}angular.module("blocks.exception").provider("exceptionHandler",e).config(t),t.$inject=["$provide"],o.$inject=["$delegate","exceptionHandler","logger"]}(),function(){"use strict";function e(e,t){function o(o){return function(r){var n,c;return r.data&&r.data.description&&(n="\n"+r.data.description,c=o+n),r.data.description=c,t.error(c),e.reject(r)}}var r={catcher:o};return r}e.$inject=["$q","logger"],angular.module("blocks.exception").factory("exception",e)}(),function(){"use strict";function e(e,t,o){function r(e,r,c,i){function u(e,r){e.forEach(function(e){e.config.resolve=angular.extend(e.config.resolve||{},n.resolveAlways),t.state(e.state,e.config)}),r&&!g&&(g=!0,o.otherwise(r))}function a(){r.$on("$stateChangeError",function(t,o,r,n,c,u){if(!f){d.errors++,f=!0;var a=o&&(o.title||o.name||o.loadedTemplateUrl)||"unknown target",l="Error routing to "+a+". "+(u.data||"")+". <br/>"+(u.statusText||"")+": "+(u.status||"");i.warning(l,[o]),e.path("/")}})}function l(){a(),p()}function s(){return c.get()}function p(){r.$on("$stateChangeSuccess",function(e,t,o,c,i){d.changes++,f=!1;var u=n.docTitle+" "+(t.title||"");r.title=u})}var f=!1,g=!1,d={errors:0,changes:0},m={configureStates:u,getStates:s,stateCounts:d};return l(),m}var n={docTitle:void 0,resolveAlways:{}};e.html5Mode({enabled:!1,requireBase:!1}),this.configure=function(e){angular.extend(n,e)},this.$get=r,r.$inject=["$location","$rootScope","$state","logger"]}angular.module("blocks.router").provider("routerHelper",e),e.$inject=["$locationProvider","$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function e(e,t){function o(t,o,r){console.error(t,r),e.error("Error: "+t,o)}function r(t,o,r){console.info(t,r),e.info("Info: "+t,o)}function n(t,o,r){console.log(t,r),e.info("Success: "+t,o)}function c(t,o,r){console.warn(t,r),e.warn("Warning: "+t,o)}var i={error:o,info:r,success:n,warning:c,log:e.log};return i}angular.module("blocks.logger").factory("logger",e),e.$inject=["$log"]}(),function(){"use strict";angular.module("app.lab.attributes",["app.core"])}(),function(){angular.module("app.lab.products",["app.core"])}(),function(){"use strict";angular.module("app.homepage",["app.core"])}(),function(){angular.module("app.lab",["app.core","app.lab.products","app.lab.attributes"])}(),function(){"use strict";angular.module("app.layout",["app.core"])}(),function(){"use strict";function e(){var e=this;e.title="Homepage"}angular.module("app.homepage").controller("HomeController",e)}(),function(){"use strict";function e(e){e.configureStates(t())}function t(){return[{state:"homepage",config:{url:"/",templateUrl:"app/homepage/homepage.view.html",controller:"HomeController",controllerAs:"home",title:"DoYourBeauty"}}]}angular.module("app.homepage").run(e),e.$inject=["routerHelper"]}(),function(){"use strict";function e(e){var t=this;t.choices={}}angular.module("app.lab").controller("LabController",e),e.$inject=["$scope"]}(),function(){"use strict";function e(e){e.configureStates(t())}function t(){return[{state:"lab",config:{url:"/lab",templateUrl:"app/lab/lab.view.html",controller:"LabController",controllerAs:"labVm",title:"DoYourBeauty - Lab"}}]}angular.module("app.lab").run(e),e.$inject=["routerHelper"]}(),function(){"use strict";function e(e){}angular.module("app.layout").controller("HeaderController",e),e.$inject=["$scope"]}(),function(){"use strict";function e(e,t){function o(){return"undefined"==typeof e.labVm.choices.product?void t.go("lab.products"):void(i.product=e.labVm.choices.product)}function r(e){return"app/lab/attributes/forms/"+e.form+"/"+e.form+".view.html"}function n(e){return"app/lab/attributes/results/"+e.name+"/"+e.name+".view.html"}function c(t){return"undefined"!=typeof e.labVm.choices[t.name]}var i=this;i.getForm=r,i.getResultView=n,i.choiceValidate=c,o()}angular.module("app.lab.attributes").controller("AttributesController",e),e.$inject=["$scope","$state"]}(),function(){"use strict";function e(e){e.configureStates(t())}function t(){return[{state:"lab.attributes",config:{url:"/attributes",title:"DoYourBeauty - attributes",controller:"AttributesController",controllerAs:"attributesVm",templateUrl:"app/lab/attributes/attributes.view.html"}}]}angular.module("app.lab.attributes").run(e),e.$inject=["routerHelper"]}(),function(){"use strict";function e(e,t,o){function r(){o.ready().then(n)}function n(){i.products=o.getProducts()}function c(t){e.labVm.choices.product=t}var i=this;i.select=c,r()}angular.module("app.lab.products").controller("ProductsController",e),e.$inject=["$scope","$state","dataservice"]}(),function(){"use strict";function e(e){e.configureStates(t())}function t(){return[{state:"lab.products",config:{url:"/products",title:"DoYourBeauty - products",controller:"ProductsController",controllerAs:"productsVm",templateUrl:"app/lab/products/products.view.html"}}]}angular.module("app.lab.products").run(e),e.$inject=["routerHelper"]}(),function(){"use strict";function e(e){function t(e){return n.choices.indexOf(e)>-1}function o(e){var t=n.choices.indexOf(e);t>-1?n.choices.splice(t,1):n.choices.push(e)}function r(){e.labVm.choices[n.attribute.name]=n.choices}var n=this;n.choices=[],n.exists=t,n.toggle=o,n.saveChoices=r}angular.module("app.lab.attributes").controller("CheckboxController",e),e.$inject=["$scope"]}(),function(){"use strict";function e(e){function t(e){n.choice&&(document.getElementById("form-color-"+n.choice).style.opacity=1,n.percent=100),n.choice=e}function o(){e.labVm.choices[n.attribute.name]={value:n.choice,percent:n.percent}}function r(){document.getElementById("form-color-"+n.choice).style.opacity=n.percent/100}var n=this,n=this;n.choice=null,n.setChoice=t,n.setOpacity=r,n.saveChoice=o,n.percent=100}angular.module("app.lab.attributes").controller("ColorController",e),e.$inject=["$scope"]}(),function(){"use strict";function e(e){function t(t){o.choice=t,e.labVm.choices[o.attribute.name]=t}var o=this;o.choice=null,o.setChoice=t}angular.module("app.lab.attributes").controller("ImgRadioController",e),e.$inject=["$scope"]}(),function(){"use strict";function e(e){function t(){""!==o.choice&&null!==o.choice?e.labVm.choices[o.attribute.name]=o.choice:delete e.labVm.choices[o.attribute.name]}var o=this;o.choice=null,o.setChoice=t}angular.module("app.lab.attributes").controller("InputTextController",e),e.$inject=["$scope"]}(),function(){"use strict";function e(e){function t(e){r.choice&&(r.percent=100),r.choice=e}function o(){e.labVm.choices[r.attribute.name]={value:r.choice,percent:r.percent}}var r=this,r=this;r.choice=null,r.setChoice=t,r.saveChoice=o,r.percent=100}angular.module("app.lab.attributes").controller("RadioSliderController",e),e.$inject=["$scope"]}(),function(){"use strict";function e(e){}angular.module("app.lab.attributes").controller("CreamController",e),e.$inject=["$scope"]}(),function(){"use strict";function e(e,t){function o(t){c.choice=t,e.labVm.choices[c.attribute.name]=t,r(c.choice.img)}function r(e){c.attribute.haveImgPreview&&(c.imgPreview=e)}function n(e){"undefined"!=typeof e&&o(t("getByName")(c.attribute.values,e))}var c=this;c.choice=null,c.imgPreview=null,c.setChoice=o,c.setImgPreview=r,c.setDefault=n}angular.module("app.lab.attributes").controller("BtnRadioController",e),e.$inject=["$scope","$filter"]}();
//# sourceMappingURL=data:application/json;base64,
