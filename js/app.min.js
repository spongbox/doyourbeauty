!function(){"use strict";angular.module("app",["app.core","app.lab","app.homepage","app.layout"])}(),function(){"use strict";angular.module("app.core",["ngAnimate","ngSanitize","blocks.exception","blocks.logger","blocks.router","ui.router","ngMaterial","smoothScroll"])}(),function(){"use strict";function t(t,e,r){t.debugEnabled&&t.debugEnabled(!0),r.configure(o.appErrorPrefix),e.configure({docTitle:o.appTitle+": "})}var e=angular.module("app.core"),o={appErrorPrefix:"[<%= appName %> Error] ",appTitle:"<%= appName %>"};e.value("config",o),e.config(t),t.$inject=["$logProvider","routerHelperProvider","exceptionHandlerProvider"]}(),function(){"use strict";function t(t){var o="/404";t.configureStates(e(),o)}function e(){return[{state:"404",config:{url:"/404",templateUrl:"app/core/404.html",title:"404"}}]}t.$inject=["routerHelper"],angular.module("app.core").run(t)}(),function(){"use strict";function t(t,e,o,r){function n(){return a.products}function c(){return i.then(function(t){return a=t.data,!0},function(){return r.error("Impossible de récupérer les données"),!1})}var u="/ressources/products.json",i=t.get(u),a=null,l={ready:c,getProducts:n};return l}angular.module("app.core").factory("dataservice",t),t.$inject=["$http","$q","exception","logger"]}(),function(){"use strict";function t(){return function(t,e){for(var o=0,r=t.length;r>o;o++)if(t[o].value==e||t[o].name==e)return t[o];return null}}angular.module("app.core").filter("getByName",t)}(),function(){"use strict";angular.module("blocks.exception",["blocks.logger"])}(),function(){"use strict";angular.module("blocks.logger",[])}(),function(){"use strict";angular.module("blocks.router",["ui.router","blocks.logger"])}(),function(){"use strict";function t(){this.config={appErrorPrefix:void 0},this.configure=function(t){this.config.appErrorPrefix=t},this.$get=function(){return{config:this.config}}}function e(t){t.decorator("$exceptionHandler",o)}function o(t,e,o){return function(r,n){var c=e.config.appErrorPrefix||"",u={exception:r,cause:n};r.message=c+r.message,t(r,n),o.error(r.message,u)}}angular.module("blocks.exception").provider("exceptionHandler",t).config(e),e.$inject=["$provide"],o.$inject=["$delegate","exceptionHandler","logger"]}(),function(){"use strict";function t(t,e){function o(o){return function(r){var n,c;return r.data&&r.data.description&&(n="\n"+r.data.description,c=o+n),r.data.description=c,e.error(c),t.reject(r)}}var r={catcher:o};return r}t.$inject=["$q","logger"],angular.module("blocks.exception").factory("exception",t)}(),function(){"use strict";function t(t,e){function o(e,o,r){console.error(e,r),t.error("Error: "+e,o)}function r(e,o,r){console.info(e,r),t.info("Info: "+e,o)}function n(e,o,r){console.log(e,r),t.info("Success: "+e,o)}function c(e,o,r){console.warn(e,r),t.warn("Warning: "+e,o)}var u={error:o,info:r,success:n,warning:c,log:t.log};return u}angular.module("blocks.logger").factory("logger",t),t.$inject=["$log"]}(),function(){"use strict";function t(t,e,o){function r(t,r,c,u){function i(t,r){t.forEach(function(t){t.config.resolve=angular.extend(t.config.resolve||{},n.resolveAlways),e.state(t.state,t.config)}),r&&!g&&(g=!0,o.otherwise(r))}function a(){r.$on("$stateChangeError",function(e,o,r,n,c,i){if(!f){m.errors++,f=!0;var a=o&&(o.title||o.name||o.loadedTemplateUrl)||"unknown target",l="Error routing to "+a+". "+(i.data||"")+". <br/>"+(i.statusText||"")+": "+(i.status||"");u.warning(l,[o]),t.path("/")}})}function l(){a(),p()}function s(){return c.get()}function p(){r.$on("$stateChangeSuccess",function(t,e,o,c,u){m.changes++,f=!1;var i=n.docTitle+" "+(e.title||"");r.title=i})}var f=!1,g=!1,m={errors:0,changes:0},d={configureStates:i,getStates:s,stateCounts:m};return l(),d}var n={docTitle:void 0,resolveAlways:{}};t.html5Mode({enabled:!1,requireBase:!1}),this.configure=function(t){angular.extend(n,t)},this.$get=r,r.$inject=["$location","$rootScope","$state","logger"]}angular.module("blocks.router").provider("routerHelper",t),t.$inject=["$locationProvider","$stateProvider","$urlRouterProvider"]}(),function(){"use strict";angular.module("app.lab.attributes",["app.core"])}(),function(){angular.module("app.lab.products",["app.core"])}(),function(){"use strict";angular.module("app.homepage",["app.core"])}(),function(){angular.module("app.lab",["app.core","app.lab.products","app.lab.attributes"])}(),function(){"use strict";angular.module("app.layout",["app.core"])}(),function(){"use strict";function t(){var t=this;t.title="Homepage"}angular.module("app.homepage").controller("HomeController",t)}(),function(){"use strict";function t(t){t.configureStates(e())}function e(){return[{state:"homepage",config:{url:"/",templateUrl:"app/homepage/homepage.view.html",controller:"HomeController",controllerAs:"home",title:"DoYourBeauty"}}]}angular.module("app.homepage").run(t),t.$inject=["routerHelper"]}(),function(){"use strict";function t(t){var e=this;e.choices={}}angular.module("app.lab").controller("LabController",t),t.$inject=["$scope"]}(),function(){"use strict";function t(t){t.configureStates(e())}function e(){return[{state:"lab",config:{url:"/lab",templateUrl:"app/lab/lab.view.html",controller:"LabController",controllerAs:"labVm",title:"DoYourBeauty - Lab"}}]}angular.module("app.lab").run(t),t.$inject=["routerHelper"]}(),function(){"use strict";function t(t){}angular.module("app.layout").controller("HeaderController",t),t.$inject=["$scope"]}(),function(){"use strict";function t(t,e,o,r,n,c){function u(){return"undefined"==typeof t.labVm.choices.product?void e.go("lab.products"):(m.product=t.labVm.choices.product,m.attributes=r("orderBy")(m.product.attributes,"order"),void(m.current=m.attributes[0]))}function i(t){return"app/lab/attributes/forms/"+t.form+"/"+t.form+".view.html"}function a(t){return"app/lab/attributes/results/"+t.name+"/"+t.name+".view.html"}function l(e){return"undefined"!=typeof t.labVm.choices[e.name]}function s(e){for(var o=m.attributes.length,r=!0;o>0&&r;)document.getElementById(m.attributes[o-1].name)&&document.getElementById(m.attributes[o-1].name).offsetTop-200<=n.pageYOffset&&(m.current=m.attributes[o-1],r=!1,t.$apply()),o--}function p(t){t.name!==m.current.name&&g(document.querySelector("#"+t.name))}function f(t){var e=angular.element(t).next();g(e[0])}function g(t){o(t,{offset:180,duration:1e3,easing:"easeOutCubic"})}var m=this;m.product=null,m.attributes=[],m.getForm=i,m.getResultView=a,m.choiceValidate=l,m.render=p,m.goToNext=f,n.addEventListener("scroll",s),u(),t.$on("$destroy",function(){n.removeEventListener("scroll",s)})}angular.module("app.lab.attributes").controller("AttributesController",t),t.$inject=["$scope","$state","smoothScroll","$filter","$window","$document"]}(),function(){"use strict";function t(t){t.configureStates(e())}function e(){return[{state:"lab.attributes",config:{url:"/attributes",title:"DoYourBeauty - attributes",controller:"AttributesController",controllerAs:"attributesVm",templateUrl:"app/lab/attributes/attributes.view.html"}}]}angular.module("app.lab.attributes").run(t),t.$inject=["routerHelper"]}(),function(){"use strict";function t(t,e,o){function r(){o.ready().then(n)}function n(){u.products=o.getProducts()}function c(e){t.labVm.choices.product=e}var u=this;u.select=c,r()}angular.module("app.lab.products").controller("ProductsController",t),t.$inject=["$scope","$state","dataservice"]}(),function(){"use strict";function t(t){t.configureStates(e())}function e(){return[{state:"lab.products",config:{url:"/products",title:"DoYourBeauty - products",controller:"ProductsController",controllerAs:"productsVm",templateUrl:"app/lab/products/products.view.html"}}]}angular.module("app.lab.products").run(t),t.$inject=["routerHelper"]}(),function(){"use strict";function t(t,e){function o(e){n.choice=e,t.labVm.choices[n.attribute.name]=e,r(n.choice.img),t.attributesVm.goToNext(document.querySelector("#"+n.attribute.name))}function r(t){n.attribute.haveImgPreview&&(n.imgPreview=t)}var n=this;n.choice=null,n.imgPreview=null,n.setChoice=o,n.setImgPreview=r}angular.module("app.lab.attributes").controller("BtnRadioController",t),t.$inject=["$scope","$filter"]}(),function(){"use strict";function t(t){function e(t){n.choice&&(document.getElementById("form-color-"+n.choice).style.opacity=1,n.percent=100),n.choice=t}function o(){t.labVm.choices[n.attribute.name]={value:n.choice,percent:n.percent},t.attributesVm.goToNext(document.querySelector("#"+n.attribute.name))}function r(){document.getElementById("form-color-"+n.choice).style.opacity=n.percent/100}var n=this,n=this;n.choice=null,n.setChoice=e,n.setOpacity=r,n.saveChoice=o,n.percent=100}angular.module("app.lab.attributes").controller("ColorController",t),t.$inject=["$scope"]}(),function(){"use strict";function t(t){function e(t){return n.choices.indexOf(t)>-1}function o(t){var e=n.choices.indexOf(t);e>-1?n.choices.splice(e,1):n.choices.push(t)}function r(){t.labVm.choices[n.attribute.name]=n.choices,t.attributesVm.goToNext(document.querySelector("#"+n.attribute.name))}var n=this;n.choices=[],n.exists=e,n.toggle=o,n.saveChoices=r}angular.module("app.lab.attributes").controller("CheckboxController",t),t.$inject=["$scope"]}(),function(){"use strict";function t(t){function e(e){o.choice=e,t.labVm.choices[o.attribute.name]=e,t.attributesVm.goToNext(document.querySelector("#"+o.attribute.name))}var o=this;o.choice=null,o.setChoice=e}angular.module("app.lab.attributes").controller("ImgRadioController",t),t.$inject=["$scope"]}(),function(){"use strict";function t(t){function e(){""!==o.choice&&null!==o.choice?(t.labVm.choices[o.attribute.name]=o.choice,t.attributesVm.goToNext(document.querySelector("#"+o.attribute.name))):delete t.labVm.choices[o.attribute.name]}var o=this;o.choice=null,o.setChoice=e}angular.module("app.lab.attributes").controller("InputTextController",t),t.$inject=["$scope"]}(),function(){"use strict";function t(t){function e(t){r.choice&&(r.percent=100),r.choice=t}function o(){t.labVm.choices[r.attribute.name]={value:r.choice,percent:r.percent},t.attributesVm.goToNext(document.querySelector("#"+r.attribute.name))}var r=this,r=this;r.choice=null,r.setChoice=e,r.saveChoice=o,r.percent=100}angular.module("app.lab.attributes").controller("RadioSliderController",t),t.$inject=["$scope"]}(),function(){"use strict";function t(t){}angular.module("app.lab.attributes").controller("CreamController",t),t.$inject=["$scope"]}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5tb2R1bGUuanMiLCJjb3JlLm1vZHVsZS5qcyIsImNvbmZpZy5qcyIsImNvcmUucm91dGUuanMiLCJhcHAubWluLmpzIiwiZGF0YXNlcnZpY2UuanMiLCJnZXRieW5hbWUuZmlsdGVyLmpzIiwiZXhjZXB0aW9uL2V4Y2VwdGlvbi5tb2R1bGUuanMiLCJsb2dnZXIvbG9nZ2VyLm1vZHVsZS5qcyIsInJvdXRlci9yb3V0ZXIubW9kdWxlLmpzIiwiZXhjZXB0aW9uL2V4Y2VwdGlvbi1oYW5kbGVyLnByb3ZpZGVyLmpzIiwiZXhjZXB0aW9uL2V4Y2VwdGlvbi5qcyIsImxvZ2dlci9sb2dnZXIuanMiLCJyb3V0ZXIvcm91dGVyLWhlbHBlci5wcm92aWRlci5qcyIsImxhYi9hdHRyaWJ1dGVzL2F0dHJpYnV0ZXMubW9kdWxlLmpzIiwibGFiL3Byb2R1Y3RzL3Byb2R1Y3RzLm1vZHVsZS5qcyIsImhvbWVwYWdlL2hvbWVwYWdlLm1vZHVsZS5qcyIsImxhYi9sYWIubW9kdWxlLmpzIiwibGF5b3V0L2xheW91dC5tb2R1bGUuanMiLCJob21lcGFnZS9ob21lcGFnZS5jb250cm9sbGVyLmpzIiwiaG9tZXBhZ2UvaG9tZXBhZ2Uucm91dGUuanMiLCJsYWIvbGFiLmNvbnRyb2xsZXIuanMiLCJsYWIvbGFiLnJvdXRlLmpzIiwibGF5b3V0L2hlYWRlci5jb250cm9sbGVyLmpzIiwibGFiL2F0dHJpYnV0ZXMvYXR0cmlidXRlcy5jb250cm9sbGVyLmpzIiwibGFiL2F0dHJpYnV0ZXMvYXR0cmlidXRlcy5yb3V0ZS5qcyIsImxhYi9wcm9kdWN0cy9wcm9kdWN0cy5jb250cm9sbGVyLmpzIiwibGFiL3Byb2R1Y3RzL3Byb2R1Y3RzLnJvdXRlLmpzIiwibGFiL2F0dHJpYnV0ZXMvZm9ybXMvYnRuLXJhZGlvL2J0bi1yYWRpby5jb250cm9sbGVyLmpzIiwibGFiL2F0dHJpYnV0ZXMvZm9ybXMvY29sb3IvY29sb3IuY29udHJvbGxlci5qcyIsImxhYi9hdHRyaWJ1dGVzL2Zvcm1zL2NoZWNrYm94L2NoZWNrYm94LmNvbnRyb2xsZXIuanMiLCJsYWIvYXR0cmlidXRlcy9mb3Jtcy9pbWctcmFkaW8vaW1nLXJhZGlvLmNvbnRyb2xsZXIuanMiLCJsYWIvYXR0cmlidXRlcy9mb3Jtcy9pbnB1dC10ZXh0L2lucHV0LXRleHQuY29udHJvbGxlci5qcyIsImxhYi9hdHRyaWJ1dGVzL2Zvcm1zL3JhZGlvLXNsaWRlci9yYWRpby1zbGlkZXIuY29udHJvbGxlci5qcyIsImxhYi9hdHRyaWJ1dGVzL3Jlc3VsdHMvY3JlYW0vY3JlYW0uY29udHJvbGxlci5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29uZmlndXJlIiwiJGxvZ1Byb3ZpZGVyIiwicm91dGVySGVscGVyUHJvdmlkZXIiLCJleGNlcHRpb25IYW5kbGVyUHJvdmlkZXIiLCJkZWJ1Z0VuYWJsZWQiLCJjb25maWciLCJhcHBFcnJvclByZWZpeCIsImRvY1RpdGxlIiwiYXBwVGl0bGUiLCJjb3JlIiwidmFsdWUiLCIkaW5qZWN0IiwiYXBwUnVuIiwicm91dGVySGVscGVyIiwib3RoZXJ3aXNlIiwiY29uZmlndXJlU3RhdGVzIiwiZ2V0U3RhdGVzIiwic3RhdGUiLCJ1cmwiLCJ0ZW1wbGF0ZVVybCIsInRpdGxlIiwicnVuIiwiZGF0YXNlcnZpY2UiLCIkaHR0cCIsIiRxIiwiZXhjZXB0aW9uIiwibG9nZ2VyIiwiZ2V0UHJvZHVjdHMiLCJkYXRhIiwicHJvZHVjdHMiLCJyZWFkeSIsInByb21pc2UiLCJ0aGVuIiwicmVzdWx0IiwiZXJyb3IiLCJqc29uVVJMIiwiZ2V0Iiwic2VydmljZSIsImZhY3RvcnkiLCJnZXRCeU5hbWUiLCJpbnB1dCIsIm5hbWUiLCJpIiwibGVuZ3RoIiwiZmlsdGVyIiwidGhpcyIsInVuZGVmaW5lZCIsIiRnZXQiLCIkcHJvdmlkZSIsImRlY29yYXRvciIsImV4dGVuZEV4Y2VwdGlvbkhhbmRsZXIiLCIkZGVsZWdhdGUiLCJleGNlcHRpb25IYW5kbGVyIiwiY2F1c2UiLCJlcnJvckRhdGEiLCJtZXNzYWdlIiwicHJvdmlkZXIiLCJjYXRjaGVyIiwiZSIsInRocm93bkRlc2NyaXB0aW9uIiwibmV3TWVzc2FnZSIsImRlc2NyaXB0aW9uIiwicmVqZWN0IiwiJGxvZyIsInRvYXN0ciIsImNvbnNvbGUiLCJpbmZvIiwic3VjY2VzcyIsImxvZyIsIndhcm5pbmciLCJ3YXJuIiwiJGxvY2F0aW9uUHJvdmlkZXIiLCIkc3RhdGVQcm92aWRlciIsIiR1cmxSb3V0ZXJQcm92aWRlciIsIlJvdXRlckhlbHBlciIsIiRsb2NhdGlvbiIsIiRyb290U2NvcGUiLCIkc3RhdGUiLCJzdGF0ZXMiLCJvdGhlcndpc2VQYXRoIiwiZm9yRWFjaCIsInJlc29sdmUiLCJleHRlbmQiLCJyZXNvbHZlQWx3YXlzIiwiaGFzT3RoZXJ3aXNlIiwiaGFuZGxlUm91dGluZ0Vycm9ycyIsIiRvbiIsImV2ZW50IiwidG9TdGF0ZSIsInRvUGFyYW1zIiwiZnJvbVN0YXRlIiwiZnJvbVBhcmFtcyIsImhhbmRsaW5nU3RhdGVDaGFuZ2VFcnJvciIsInN0YXRlQ291bnRzIiwiZXJyb3JzIiwiZGVzdGluYXRpb24iLCJsb2FkZWRUZW1wbGF0ZVVybCIsIm1zZyIsInN0YXR1c1RleHQiLCJzdGF0dXMiLCJwYXRoIiwiaW5pdCIsInVwZGF0ZURvY1RpdGxlIiwiY2hhbmdlcyIsImh0bWw1TW9kZSIsImVuYWJsZWQiLCJyZXF1aXJlQmFzZSIsImNmZyIsIkhvbWVDb250cm9sbGVyIiwidm0iLCJjb250cm9sbGVyIiwiY29udHJvbGxlckFzIiwiTGFiQ29udHJvbGxlciIsIiRzY29wZSIsImNob2ljZXMiLCJIZWFkZXJDb250cm9sbGVyIiwiQXR0cmlidXRlc0NvbnRyb2xsZXIiLCJzbW9vdGhTY3JvbGwiLCIkZmlsdGVyIiwiJHdpbmRvdyIsIiRkb2N1bWVudCIsImFjdGl2YXRlIiwibGFiVm0iLCJwcm9kdWN0IiwiZ28iLCJhdHRyaWJ1dGVzIiwiY3VycmVudCIsImdldEZvcm0iLCJhdHRyaWJ1dGUiLCJmb3JtIiwiZ2V0UmVzdWx0VmlldyIsImNob2ljZVZhbGlkYXRlIiwiY2hlY2tQb3MiLCJub3RGb3VuZCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJvZmZzZXRUb3AiLCJwYWdlWU9mZnNldCIsIiRhcHBseSIsInJlbmRlciIsImdvVG8iLCJxdWVyeVNlbGVjdG9yIiwiZ29Ub05leHQiLCJuZXh0RWxtbnQiLCJlbGVtZW50IiwibmV4dCIsImVsbW50Iiwib2Zmc2V0IiwiZHVyYXRpb24iLCJlYXNpbmciLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIlByb2R1Y3RzQ29udHJvbGxlciIsInNlbGVjdCIsIkJ0blJhZGlvQ29udHJvbGxlciIsInNldENob2ljZSIsImF0dHJpYnV0ZUNob2ljZWQiLCJjaG9pY2UiLCJzZXRJbWdQcmV2aWV3IiwiaW1nIiwiYXR0cmlidXRlc1ZtIiwiaGF2ZUltZ1ByZXZpZXciLCJpbWdQcmV2aWV3IiwiQ29sb3JDb250cm9sbGVyIiwic3R5bGUiLCJvcGFjaXR5IiwicGVyY2VudCIsInNhdmVDaG9pY2UiLCJzZXRPcGFjaXR5IiwiQ2hlY2tib3hDb250cm9sbGVyIiwiZXhpc3RzIiwiaW5kZXhPZiIsInRvZ2dsZSIsImlkeCIsInNwbGljZSIsInB1c2giLCJzYXZlQ2hvaWNlcyIsIkltZ1JhZGlvQ29udHJvbGxlciIsIklucHV0VGV4dENvbnRyb2xsZXIiLCJSYWRpb1NsaWRlckNvbnRyb2xsZXIiLCJDcmVhbUNvbnRyb2xsZXIiXSwibWFwcGluZ3MiOiJDQUFBLFdBQ0EsWUFFQUEsU0FBQUMsT0FBQSxPQUNBLFdBQ0EsVUFDQSxlQUNBLGtCQ1BBLFdBQ0EsWUFFQUQsU0FDQUMsT0FBQSxZQUNBLFlBQUEsYUFDQSxtQkFBQSxnQkFBQSxnQkFDQSxZQUFBLGFBQUEsb0JDUEEsV0FDQSxZQWNBLFNBQUFDLEdBQUFDLEVBQUFDLEVBQUFDLEdBQ0FGLEVBQUFHLGNBQ0FILEVBQUFHLGNBQUEsR0FFQUQsRUFBQUgsVUFBQUssRUFBQUMsZ0JBQ0FKLEVBQUFGLFdBQUFPLFNB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RCxFQUFBZ0QsUUFDQTVDLEVBQUFTLE1BQUFSLFFBQUFMLEVBQUFtQixVQUFBdkYsTUFBQW9FLEVBQUFnRCxPQUNBNUMsRUFBQStDLGFBQUFsQixTQUFBUixTQUFBTyxjQUFBLElBQUFoQyxFQUFBbUIsVUFBQXZGLGNBRUF3RSxHQUFBUyxNQUFBUixRQUFBTCxFQUFBbUIsVUFBQXZGLE1BVEEsR0FBQW9FLEdBQUFoRSxJQUNBZ0UsR0FBQWdELE9BQUEsS0FDQWhELEVBQUE4QyxVQUFBQSxFQVZBN0osUUFDQUMsT0FBQSxzQkFDQStHLFdBQUEsc0JBQUFvRSxHQUVBQSxFQUFBdkssU0FBQSxhQ1BBLFdBQ0EsWUFTQSxTQUFBd0ssR0FBQWxFLEdBU0EsUUFBQTBDLEdBQUFDLEdBQ0EvQyxFQUFBZ0QsU0FDQWhELEVBQUF5RCxRQUFBLEtBRUF6RCxFQUFBZ0QsT0FBQUQsRUFHQSxRQUFBVyxLQUNBdEQsRUFBQVMsTUFBQVIsUUFBQUwsRUFBQW1CLFVBQUF2RixPQUFBL0IsTUFBQW1HLEVBQUFnRCxPQUFBUyxRQUFBekQsRUFBQXlELFNBQ0FyRCxFQUFBK0MsYUFBQWxCLFNBQUFSLFNBQUFPLGNBQUEsSUFBQWhDLEVBQUFtQixVQUFBdkYsT0FqQkEsR0FBQW9FLEdBQUFoRSxLQUNBZ0UsRUFBQWhFLElBQ0FnRSxHQUFBZ0QsT0FBQSxLQUNBaEQsRUFBQThDLFVBQUFBLEVBQ0E5QyxFQUFBMEQsV0FBQUEsRUFDQTFELEVBQUF5RCxRQUFBLElBYkF4SyxRQUNBQyxPQUFBLHNCQUNBK0csV0FBQSx3QkFBQXFFLEdBRUFBLEVBQUF4SyxTQUFBLGFDUEEsV0FDQSxZQVNBLFNBQUF5SyxHQUFBbkUsSUFQQW5ILFFBQ0FDLE9BQUEsc0JBQ0ErRyxXQUFBLGtCQUFBc0UsR0FFQUEsRUFBQXpLLFNBQUEiLCJmaWxlIjoiYXBwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFtcclxuICAgICAgICAnYXBwLmNvcmUnLFxyXG4gICAgICAgICdhcHAubGFiJyxcclxuICAgICAgICAnYXBwLmhvbWVwYWdlJyxcclxuICAgICAgICAnYXBwLmxheW91dCdcclxuICAgIF0pO1xyXG5cclxufSkoKTtcclxuIiwiKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwLmNvcmUnLCBbXHJcbiAgICAgICAgICAgICduZ0FuaW1hdGUnLCAnbmdTYW5pdGl6ZScsXHJcbiAgICAgICAgICAgICdibG9ja3MuZXhjZXB0aW9uJywgJ2Jsb2Nrcy5sb2dnZXInLCAnYmxvY2tzLnJvdXRlcicsXHJcbiAgICAgICAgICAgICd1aS5yb3V0ZXInLCAnbmdNYXRlcmlhbCcsICdzbW9vdGhTY3JvbGwnXHJcbiAgICAgICAgXSk7XHJcbn0pKCk7XHJcbiIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIGNvcmUgPSBhbmd1bGFyLm1vZHVsZSgnYXBwLmNvcmUnKTtcclxuICAgIHZhciBjb25maWcgPSB7XHJcbiAgICAgICAgYXBwRXJyb3JQcmVmaXg6ICdbPCU9IGFwcE5hbWUgJT4gRXJyb3JdICcsXHJcbiAgICAgICAgYXBwVGl0bGU6ICc8JT0gYXBwTmFtZSAlPidcclxuICAgIH07XHJcblxyXG4gICAgY29yZS52YWx1ZSgnY29uZmlnJywgY29uZmlnKTtcclxuXHJcbiAgICBjb3JlLmNvbmZpZyhjb25maWd1cmUpO1xyXG5cclxuICAgIGNvbmZpZ3VyZS4kaW5qZWN0ID0gWyckbG9nUHJvdmlkZXInLCAncm91dGVySGVscGVyUHJvdmlkZXInLCAnZXhjZXB0aW9uSGFuZGxlclByb3ZpZGVyJ107XHJcbiAgICAvKiBAbmdJbmplY3QgKi9cclxuICAgIGZ1bmN0aW9uIGNvbmZpZ3VyZSgkbG9nUHJvdmlkZXIsIHJvdXRlckhlbHBlclByb3ZpZGVyLCBleGNlcHRpb25IYW5kbGVyUHJvdmlkZXIpIHtcclxuICAgICAgICBpZiAoJGxvZ1Byb3ZpZGVyLmRlYnVnRW5hYmxlZCkge1xyXG4gICAgICAgICAgICAkbG9nUHJvdmlkZXIuZGVidWdFbmFibGVkKHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBleGNlcHRpb25IYW5kbGVyUHJvdmlkZXIuY29uZmlndXJlKGNvbmZpZy5hcHBFcnJvclByZWZpeCk7XHJcbiAgICAgICAgcm91dGVySGVscGVyUHJvdmlkZXIuY29uZmlndXJlKHtkb2NUaXRsZTogY29uZmlnLmFwcFRpdGxlICsgJzogJ30pO1xyXG4gICAgfVxyXG5cclxufSkoKTtcclxuIiwiKGZ1bmN0aW9uKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhcHAuY29yZScpXHJcbiAgICAgICAgLnJ1bihhcHBSdW4pO1xyXG5cclxuICAgIC8qIEBuZ0luamVjdCAqL1xyXG4gICAgZnVuY3Rpb24gYXBwUnVuKHJvdXRlckhlbHBlcikge1xyXG4gICAgICAgIHZhciBvdGhlcndpc2UgPSAnLzQwNCc7XHJcbiAgICAgICAgcm91dGVySGVscGVyLmNvbmZpZ3VyZVN0YXRlcyhnZXRTdGF0ZXMoKSwgb3RoZXJ3aXNlKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRTdGF0ZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc3RhdGU6ICc0MDQnLFxyXG4gICAgICAgICAgICAgICAgY29uZmlnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnLzQwNCcsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvY29yZS80MDQuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICc0MDQnXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59KSgpO1xyXG4iLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbXHJcbiAgICAgICAgJ2FwcC5jb3JlJyxcclxuICAgICAgICAnYXBwLmxhYicsXHJcbiAgICAgICAgJ2FwcC5ob21lcGFnZScsXHJcbiAgICAgICAgJ2FwcC5sYXlvdXQnXHJcbiAgICBdKTtcclxuXHJcbn0pKCk7XHJcblxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwLmNvcmUnLCBbXHJcbiAgICAgICAgICAgICduZ0FuaW1hdGUnLCAnbmdTYW5pdGl6ZScsXHJcbiAgICAgICAgICAgICdibG9ja3MuZXhjZXB0aW9uJywgJ2Jsb2Nrcy5sb2dnZXInLCAnYmxvY2tzLnJvdXRlcicsXHJcbiAgICAgICAgICAgICd1aS5yb3V0ZXInLCAnbmdNYXRlcmlhbCcsICdzbW9vdGhTY3JvbGwnXHJcbiAgICAgICAgXSk7XHJcbn0pKCk7XHJcblxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgY29yZSA9IGFuZ3VsYXIubW9kdWxlKCdhcHAuY29yZScpO1xyXG4gICAgdmFyIGNvbmZpZyA9IHtcclxuICAgICAgICBhcHBFcnJvclByZWZpeDogJ1s8JT0gYXBwTmFtZSAlPiBFcnJvcl0gJyxcclxuICAgICAgICBhcHBUaXRsZTogJzwlPSBhcHBOYW1lICU+J1xyXG4gICAgfTtcclxuXHJcbiAgICBjb3JlLnZhbHVlKCdjb25maWcnLCBjb25maWcpO1xyXG5cclxuICAgIGNvcmUuY29uZmlnKGNvbmZpZ3VyZSk7XHJcblxyXG4gICAgY29uZmlndXJlLiRpbmplY3QgPSBbJyRsb2dQcm92aWRlcicsICdyb3V0ZXJIZWxwZXJQcm92aWRlcicsICdleGNlcHRpb25IYW5kbGVyUHJvdmlkZXInXTtcclxuICAgIC8qIEBuZ0luamVjdCAqL1xyXG4gICAgZnVuY3Rpb24gY29uZmlndXJlKCRsb2dQcm92aWRlciwgcm91dGVySGVscGVyUHJvdmlkZXIsIGV4Y2VwdGlvbkhhbmRsZXJQcm92aWRlcikge1xyXG4gICAgICAgIGlmICgkbG9nUHJvdmlkZXIuZGVidWdFbmFibGVkKSB7XHJcbiAgICAgICAgICAgICRsb2dQcm92aWRlci5kZWJ1Z0VuYWJsZWQodHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGV4Y2VwdGlvbkhhbmRsZXJQcm92aWRlci5jb25maWd1cmUoY29uZmlnLmFwcEVycm9yUHJlZml4KTtcclxuICAgICAgICByb3V0ZXJIZWxwZXJQcm92aWRlci5jb25maWd1cmUoe2RvY1RpdGxlOiBjb25maWcuYXBwVGl0bGUgKyAnOiAnfSk7XHJcbiAgICB9XHJcblxyXG59KSgpO1xyXG5cbihmdW5jdGlvbigpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhcHBSdW4uJGluamVjdCA9IFtcInJvdXRlckhlbHBlclwiXTtcclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhcHAuY29yZScpXHJcbiAgICAgICAgLnJ1bihhcHBSdW4pO1xyXG5cclxuICAgIC8qIEBuZ0luamVjdCAqL1xyXG4gICAgZnVuY3Rpb24gYXBwUnVuKHJvdXRlckhlbHBlcikge1xyXG4gICAgICAgIHZhciBvdGhlcndpc2UgPSAnLzQwNCc7XHJcbiAgICAgICAgcm91dGVySGVscGVyLmNvbmZpZ3VyZVN0YXRlcyhnZXRTdGF0ZXMoKSwgb3RoZXJ3aXNlKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRTdGF0ZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc3RhdGU6ICc0MDQnLFxyXG4gICAgICAgICAgICAgICAgY29uZmlnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnLzQwNCcsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvY29yZS80MDQuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICc0MDQnXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59KSgpO1xyXG5cbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FwcC5jb3JlJylcclxuICAgICAgICAuZmFjdG9yeSgnZGF0YXNlcnZpY2UnLCBkYXRhc2VydmljZSk7XHJcblxyXG4gICAgZGF0YXNlcnZpY2UuJGluamVjdCA9IFsnJGh0dHAnLCAnJHEnLCAnZXhjZXB0aW9uJywgJ2xvZ2dlciddO1xyXG4gICAgLyogQG5nSW5qZWN0ICovXHJcbiAgICBmdW5jdGlvbiBkYXRhc2VydmljZSgkaHR0cCwgJHEsIGV4Y2VwdGlvbiwgbG9nZ2VyKSB7XHJcbiAgICAgICAgdmFyIGpzb25VUkwgPSAnL3Jlc3NvdXJjZXMvcHJvZHVjdHMuanNvbic7XHJcbiAgICAgICAgdmFyIHByb21pc2UgPSAkaHR0cC5nZXQoanNvblVSTCk7XHJcbiAgICAgICAgdmFyIGRhdGEgPSBudWxsO1xyXG4gICAgICAgIHZhciBzZXJ2aWNlID0ge1xyXG4gICAgICAgICAgcmVhZHk6IHJlYWR5LFxyXG4gICAgICAgICAgZ2V0UHJvZHVjdHM6IGdldFByb2R1Y3RzXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFByb2R1Y3RzKCkge1xyXG4gICAgICAgICAgcmV0dXJuIGRhdGEucHJvZHVjdHM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiByZWFkeSgpIHtcclxuICAgICAgICAgIHJldHVybiBwcm9taXNlLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XHJcbiAgICAgICAgICAgIGRhdGEgPSByZXN1bHQuZGF0YTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCdJbXBvc3NpYmxlIGRlIHLDqWN1cMOpcmVyIGxlcyBkb25uw6llcycpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSkoKTtcclxuXG4oZnVuY3Rpb24gKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBhbmd1bGFyLm1vZHVsZSgnYXBwLmNvcmUnKVxyXG4gICAgLmZpbHRlcignZ2V0QnlOYW1lJywgZ2V0QnlOYW1lKTtcclxuXHJcbiAgZnVuY3Rpb24gZ2V0QnlOYW1lKCkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0LCBuYW1lKSB7XHJcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBpbnB1dC5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmIChpbnB1dFtpXS52YWx1ZSA9PSBuYW1lIHx8IGlucHV0W2ldLm5hbWUgPT0gbmFtZSkge1xyXG4gICAgICAgICAgcmV0dXJuIGlucHV0W2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICB9XHJcbn0pKCk7XHJcblxuKGZ1bmN0aW9uKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXIubW9kdWxlKCdibG9ja3MuZXhjZXB0aW9uJywgWydibG9ja3MubG9nZ2VyJ10pO1xyXG59KSgpO1xyXG5cbihmdW5jdGlvbigpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyLm1vZHVsZSgnYmxvY2tzLmxvZ2dlcicsIFtdKTtcclxufSkoKTtcclxuXG4oZnVuY3Rpb24oKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhci5tb2R1bGUoJ2Jsb2Nrcy5yb3V0ZXInLCBbXHJcbiAgICAgICAgJ3VpLnJvdXRlcicsXHJcbiAgICAgICAgJ2Jsb2Nrcy5sb2dnZXInXHJcbiAgICBdKTtcclxufSkoKTtcclxuXG4vLyBJbmNsdWRlIGluIGluZGV4Lmh0bWwgc28gdGhhdCBhcHAgbGV2ZWwgZXhjZXB0aW9ucyBhcmUgaGFuZGxlZC5cclxuLy8gRXhjbHVkZSBmcm9tIHRlc3RSdW5uZXIuaHRtbCB3aGljaCBzaG91bGQgcnVuIGV4YWN0bHkgd2hhdCBpdCB3YW50cyB0byBydW5cclxuKGZ1bmN0aW9uKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdibG9ja3MuZXhjZXB0aW9uJylcclxuICAgICAgICAucHJvdmlkZXIoJ2V4Y2VwdGlvbkhhbmRsZXInLCBleGNlcHRpb25IYW5kbGVyUHJvdmlkZXIpXHJcbiAgICAgICAgLmNvbmZpZyhjb25maWcpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogTXVzdCBjb25maWd1cmUgdGhlIGV4Y2VwdGlvbiBoYW5kbGluZ1xyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBleGNlcHRpb25IYW5kbGVyUHJvdmlkZXIoKSB7XHJcbiAgICAgICAgLyoganNoaW50IHZhbGlkdGhpczp0cnVlICovXHJcbiAgICAgICAgdGhpcy5jb25maWcgPSB7XHJcbiAgICAgICAgICAgIGFwcEVycm9yUHJlZml4OiB1bmRlZmluZWRcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLmNvbmZpZ3VyZSA9IGZ1bmN0aW9uIChhcHBFcnJvclByZWZpeCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5hcHBFcnJvclByZWZpeCA9IGFwcEVycm9yUHJlZml4O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuJGdldCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge2NvbmZpZzogdGhpcy5jb25maWd9O1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgY29uZmlnLiRpbmplY3QgPSBbJyRwcm92aWRlJ107XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25maWd1cmUgYnkgc2V0dGluZyBhbiBvcHRpb25hbCBzdHJpbmcgdmFsdWUgZm9yIGFwcEVycm9yUHJlZml4LlxyXG4gICAgICogQWNjZXNzaWJsZSB2aWEgY29uZmlnLmFwcEVycm9yUHJlZml4ICh2aWEgY29uZmlnIHZhbHVlKS5cclxuICAgICAqIEBwYXJhbSAge09iamVjdH0gJHByb3ZpZGVcclxuICAgICAqL1xyXG4gICAgLyogQG5nSW5qZWN0ICovXHJcbiAgICBmdW5jdGlvbiBjb25maWcoJHByb3ZpZGUpIHtcclxuICAgICAgICAkcHJvdmlkZS5kZWNvcmF0b3IoJyRleGNlcHRpb25IYW5kbGVyJywgZXh0ZW5kRXhjZXB0aW9uSGFuZGxlcik7XHJcbiAgICB9XHJcblxyXG4gICAgZXh0ZW5kRXhjZXB0aW9uSGFuZGxlci4kaW5qZWN0ID0gWyckZGVsZWdhdGUnLCAnZXhjZXB0aW9uSGFuZGxlcicsICdsb2dnZXInXTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEV4dGVuZCB0aGUgJGV4Y2VwdGlvbkhhbmRsZXIgc2VydmljZSB0byBhbHNvIGRpc3BsYXkgYSB0b2FzdC5cclxuICAgICAqIEBwYXJhbSAge09iamVjdH0gJGRlbGVnYXRlXHJcbiAgICAgKiBAcGFyYW0gIHtPYmplY3R9IGV4Y2VwdGlvbkhhbmRsZXJcclxuICAgICAqIEBwYXJhbSAge09iamVjdH0gbG9nZ2VyXHJcbiAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbn0gdGhlIGRlY29yYXRlZCAkZXhjZXB0aW9uSGFuZGxlciBzZXJ2aWNlXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGV4dGVuZEV4Y2VwdGlvbkhhbmRsZXIoJGRlbGVnYXRlLCBleGNlcHRpb25IYW5kbGVyLCBsb2dnZXIpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZXhjZXB0aW9uLCBjYXVzZSkge1xyXG4gICAgICAgICAgICB2YXIgYXBwRXJyb3JQcmVmaXggPSBleGNlcHRpb25IYW5kbGVyLmNvbmZpZy5hcHBFcnJvclByZWZpeCB8fCAnJztcclxuICAgICAgICAgICAgdmFyIGVycm9yRGF0YSA9IHtleGNlcHRpb246IGV4Y2VwdGlvbiwgY2F1c2U6IGNhdXNlfTtcclxuICAgICAgICAgICAgZXhjZXB0aW9uLm1lc3NhZ2UgPSBhcHBFcnJvclByZWZpeCArIGV4Y2VwdGlvbi5tZXNzYWdlO1xyXG4gICAgICAgICAgICAkZGVsZWdhdGUoZXhjZXB0aW9uLCBjYXVzZSk7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBDb3VsZCBhZGQgdGhlIGVycm9yIHRvIGEgc2VydmljZSdzIGNvbGxlY3Rpb24sXHJcbiAgICAgICAgICAgICAqIGFkZCBlcnJvcnMgdG8gJHJvb3RTY29wZSwgbG9nIGVycm9ycyB0byByZW1vdGUgd2ViIHNlcnZlcixcclxuICAgICAgICAgICAgICogb3IgbG9nIGxvY2FsbHkuIE9yIHRocm93IGhhcmQuIEl0IGlzIGVudGlyZWx5IHVwIHRvIHlvdS5cclxuICAgICAgICAgICAgICogdGhyb3cgZXhjZXB0aW9uO1xyXG4gICAgICAgICAgICAgKlxyXG4gICAgICAgICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgICAgICAgKiAgICAgdGhyb3cgeyBtZXNzYWdlOiAnZXJyb3IgbWVzc2FnZSB3ZSBhZGRlZCcgfTtcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihleGNlcHRpb24ubWVzc2FnZSwgZXJyb3JEYXRhKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59KSgpO1xyXG5cbihmdW5jdGlvbigpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBleGNlcHRpb24uJGluamVjdCA9IFtcIiRxXCIsIFwibG9nZ2VyXCJdO1xyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2Jsb2Nrcy5leGNlcHRpb24nKVxyXG4gICAgICAgIC5mYWN0b3J5KCdleGNlcHRpb24nLCBleGNlcHRpb24pO1xyXG5cclxuICAgIC8qIEBuZ0luamVjdCAqL1xyXG4gICAgZnVuY3Rpb24gZXhjZXB0aW9uKCRxLCBsb2dnZXIpIHtcclxuICAgICAgICB2YXIgc2VydmljZSA9IHtcclxuICAgICAgICAgICAgY2F0Y2hlcjogY2F0Y2hlclxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGNhdGNoZXIobWVzc2FnZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRocm93bkRlc2NyaXB0aW9uO1xyXG4gICAgICAgICAgICAgICAgdmFyIG5ld01lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICBpZiAoZS5kYXRhICYmIGUuZGF0YS5kZXNjcmlwdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93bkRlc2NyaXB0aW9uID0gJ1xcbicgKyBlLmRhdGEuZGVzY3JpcHRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3TWVzc2FnZSA9IG1lc3NhZ2UgKyB0aHJvd25EZXNjcmlwdGlvbjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGUuZGF0YS5kZXNjcmlwdGlvbiA9IG5ld01lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IobmV3TWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KGUpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSkoKTtcclxuXG4oZnVuY3Rpb24oKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2Jsb2Nrcy5sb2dnZXInKVxyXG4gICAgICAgIC5mYWN0b3J5KCdsb2dnZXInLCBsb2dnZXIpO1xyXG5cclxuICAgIGxvZ2dlci4kaW5qZWN0ID0gWyckbG9nJ107XHJcblxyXG4gICAgLyogQG5nSW5qZWN0ICovXHJcbiAgICBmdW5jdGlvbiBsb2dnZXIoJGxvZywgdG9hc3RyKSB7XHJcbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7XHJcbiAgICAgICAgICAgIGVycm9yICAgOiBlcnJvcixcclxuICAgICAgICAgICAgaW5mbyAgICA6IGluZm8sXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgOiBzdWNjZXNzLFxyXG4gICAgICAgICAgICB3YXJuaW5nIDogd2FybmluZyxcclxuXHJcbiAgICAgICAgICAgIC8vIHN0cmFpZ2h0IHRvIGNvbnNvbGU7IGJ5cGFzcyB0b2FzdHJcclxuICAgICAgICAgICAgbG9nICAgICA6ICRsb2cubG9nXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XHJcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGVycm9yKG1lc3NhZ2UsIGRhdGEsIHRpdGxlKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSwgdGl0bGUpO1xyXG4gICAgICAgICAgICAkbG9nLmVycm9yKCdFcnJvcjogJyArIG1lc3NhZ2UsIGRhdGEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gaW5mbyhtZXNzYWdlLCBkYXRhLCB0aXRsZSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmluZm8obWVzc2FnZSwgdGl0bGUpO1xyXG4gICAgICAgICAgICAkbG9nLmluZm8oJ0luZm86ICcgKyBtZXNzYWdlLCBkYXRhKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHN1Y2Nlc3MobWVzc2FnZSwgZGF0YSwgdGl0bGUpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2cobWVzc2FnZSwgdGl0bGUpO1xyXG4gICAgICAgICAgICAkbG9nLmluZm8oJ1N1Y2Nlc3M6ICcgKyBtZXNzYWdlLCBkYXRhKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHdhcm5pbmcobWVzc2FnZSwgZGF0YSwgdGl0bGUpIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKG1lc3NhZ2UsIHRpdGxlKTtcclxuICAgICAgICAgICAgJGxvZy53YXJuKCdXYXJuaW5nOiAnICsgbWVzc2FnZSwgZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KCkpO1xyXG5cbi8qIEhlbHAgY29uZmlndXJlIHRoZSBzdGF0ZS1iYXNlIHVpLnJvdXRlciAqL1xyXG4oZnVuY3Rpb24oKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2Jsb2Nrcy5yb3V0ZXInKVxyXG4gICAgICAgIC5wcm92aWRlcigncm91dGVySGVscGVyJywgcm91dGVySGVscGVyUHJvdmlkZXIpO1xyXG5cclxuICAgIHJvdXRlckhlbHBlclByb3ZpZGVyLiRpbmplY3QgPSBbJyRsb2NhdGlvblByb3ZpZGVyJywgJyRzdGF0ZVByb3ZpZGVyJywgJyR1cmxSb3V0ZXJQcm92aWRlciddO1xyXG4gICAgLyogQG5nSW5qZWN0ICovXHJcbiAgICBmdW5jdGlvbiByb3V0ZXJIZWxwZXJQcm92aWRlcigkbG9jYXRpb25Qcm92aWRlciwgJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlcikge1xyXG4gICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xyXG4gICAgICAgIHZhciBjb25maWcgPSB7XHJcbiAgICAgICAgICAgIGRvY1RpdGxlOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgIHJlc29sdmVBbHdheXM6IHt9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHtcclxuICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgcmVxdWlyZUJhc2U6IGZhbHNlXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuY29uZmlndXJlID0gZnVuY3Rpb24oY2ZnKSB7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKGNvbmZpZywgY2ZnKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLiRnZXQgPSBSb3V0ZXJIZWxwZXI7XHJcbiAgICAgICAgUm91dGVySGVscGVyLiRpbmplY3QgPSBbJyRsb2NhdGlvbicsICckcm9vdFNjb3BlJywgJyRzdGF0ZScsICdsb2dnZXInXTtcclxuICAgICAgICAvKiBAbmdJbmplY3QgKi9cclxuICAgICAgICBmdW5jdGlvbiBSb3V0ZXJIZWxwZXIoJGxvY2F0aW9uLCAkcm9vdFNjb3BlLCAkc3RhdGUsIGxvZ2dlcikge1xyXG4gICAgICAgICAgICB2YXIgaGFuZGxpbmdTdGF0ZUNoYW5nZUVycm9yID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHZhciBoYXNPdGhlcndpc2UgPSBmYWxzZTtcclxuICAgICAgICAgICAgdmFyIHN0YXRlQ291bnRzID0ge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JzOiAwLFxyXG4gICAgICAgICAgICAgICAgY2hhbmdlczogMFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdmFyIHNlcnZpY2UgPSB7XHJcbiAgICAgICAgICAgICAgICBjb25maWd1cmVTdGF0ZXM6IGNvbmZpZ3VyZVN0YXRlcyxcclxuICAgICAgICAgICAgICAgIGdldFN0YXRlczogZ2V0U3RhdGVzLFxyXG4gICAgICAgICAgICAgICAgc3RhdGVDb3VudHM6IHN0YXRlQ291bnRzXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBpbml0KCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gc2VydmljZTtcclxuXHJcbiAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vL1xyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gY29uZmlndXJlU3RhdGVzKHN0YXRlcywgb3RoZXJ3aXNlUGF0aCkge1xyXG4gICAgICAgICAgICAgICAgc3RhdGVzLmZvckVhY2goZnVuY3Rpb24oc3RhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5jb25maWcucmVzb2x2ZSA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKHN0YXRlLmNvbmZpZy5yZXNvbHZlIHx8IHt9LCBjb25maWcucmVzb2x2ZUFsd2F5cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoc3RhdGUuc3RhdGUsIHN0YXRlLmNvbmZpZyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGlmIChvdGhlcndpc2VQYXRoICYmICFoYXNPdGhlcndpc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBoYXNPdGhlcndpc2UgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2Uob3RoZXJ3aXNlUGF0aCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGhhbmRsZVJvdXRpbmdFcnJvcnMoKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBSb3V0ZSBjYW5jZWxsYXRpb246XHJcbiAgICAgICAgICAgICAgICAvLyBPbiByb3V0aW5nIGVycm9yLCBnbyB0byB0aGUgZGFzaGJvYXJkLlxyXG4gICAgICAgICAgICAgICAgLy8gUHJvdmlkZSBhbiBleGl0IGNsYXVzZSBpZiBpdCB0cmllcyB0byBkbyBpdCB0d2ljZS5cclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VFcnJvcicsXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oZXZlbnQsIHRvU3RhdGUsIHRvUGFyYW1zLCBmcm9tU3RhdGUsIGZyb21QYXJhbXMsIGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYW5kbGluZ1N0YXRlQ2hhbmdlRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZUNvdW50cy5lcnJvcnMrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxpbmdTdGF0ZUNoYW5nZUVycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gKHRvU3RhdGUgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0b1N0YXRlLnRpdGxlIHx8IHRvU3RhdGUubmFtZSB8fCB0b1N0YXRlLmxvYWRlZFRlbXBsYXRlVXJsKSkgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd1bmtub3duIHRhcmdldCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtc2cgPSAnRXJyb3Igcm91dGluZyB0byAnICsgZGVzdGluYXRpb24gKyAnLiAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChlcnJvci5kYXRhIHx8ICcnKSArICcuIDxici8+JyArIChlcnJvci5zdGF0dXNUZXh0IHx8ICcnKSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnOiAnICsgKGVycm9yLnN0YXR1cyB8fCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuaW5nKG1zZywgW3RvU3RhdGVdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy8nKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBpbml0KCkge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlUm91dGluZ0Vycm9ycygpO1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlRG9jVGl0bGUoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0U3RhdGVzKCkgeyByZXR1cm4gJHN0YXRlLmdldCgpOyB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVEb2NUaXRsZSgpIHtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VTdWNjZXNzJyxcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihldmVudCwgdG9TdGF0ZSwgdG9QYXJhbXMsIGZyb21TdGF0ZSwgZnJvbVBhcmFtcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZUNvdW50cy5jaGFuZ2VzKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsaW5nU3RhdGVDaGFuZ2VFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGl0bGUgPSBjb25maWcuZG9jVGl0bGUgKyAnICcgKyAodG9TdGF0ZS50aXRsZSB8fCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUudGl0bGUgPSB0aXRsZTsgLy8gZGF0YSBiaW5kIHRvIDx0aXRsZT5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KSgpO1xyXG5cbihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAubGFiLmF0dHJpYnV0ZXMnLCBbJ2FwcC5jb3JlJ10pO1xyXG5cclxufSkgKCk7XHJcblxuKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcC5sYWIucHJvZHVjdHMnLCBbJ2FwcC5jb3JlJ10pO1xyXG5cclxufSkoKTtcclxuXG4oZnVuY3Rpb24gKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcblxyXG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAuaG9tZXBhZ2UnLCBbXHJcbiAgICAnYXBwLmNvcmUnXHJcbiAgXSk7XHJcblxyXG59KSAoKTtcclxuXG4oZnVuY3Rpb24gKCkge1xyXG5cclxuICBhbmd1bGFyLm1vZHVsZSgnYXBwLmxhYicsIFtcclxuICAgICdhcHAuY29yZScsXHJcbiAgICAnYXBwLmxhYi5wcm9kdWN0cycsXHJcbiAgICAnYXBwLmxhYi5hdHRyaWJ1dGVzJ1xyXG4gIF0pO1xyXG5cclxufSkoKTtcclxuXG4oZnVuY3Rpb24oKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhci5tb2R1bGUoJ2FwcC5sYXlvdXQnLCBbXHJcbiAgICAgICdhcHAuY29yZSdcclxuICAgIF0pO1xyXG59KSgpO1xyXG5cbihmdW5jdGlvbiAoKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICBhbmd1bGFyLm1vZHVsZSgnYXBwLmhvbWVwYWdlJykuY29udHJvbGxlcignSG9tZUNvbnRyb2xsZXInLCBIb21lQ29udHJvbGxlcik7XHJcblxyXG4gIGZ1bmN0aW9uIEhvbWVDb250cm9sbGVyKCnCoHtcclxuICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICB2bS50aXRsZSA9ICdIb21lcGFnZSc7XHJcbiAgfVxyXG59KSgpO1xyXG5cbihmdW5jdGlvbigpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwLmhvbWVwYWdlJylcclxuICAgICAgICAucnVuKGFwcFJ1bik7XHJcblxyXG4gICAgYXBwUnVuLiRpbmplY3QgPSBbJ3JvdXRlckhlbHBlciddO1xyXG4gICAgLyogQG5nSW5qZWN0ICovXHJcbiAgICBmdW5jdGlvbiBhcHBSdW4ocm91dGVySGVscGVyKSB7XHJcbiAgICAgICAgcm91dGVySGVscGVyLmNvbmZpZ3VyZVN0YXRlcyhnZXRTdGF0ZXMoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0U3RhdGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHN0YXRlOiAnaG9tZXBhZ2UnLFxyXG4gICAgICAgICAgICAgICAgY29uZmlnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnLycsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvaG9tZXBhZ2UvaG9tZXBhZ2Uudmlldy5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnSG9tZUNvbnRyb2xsZXInLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2hvbWUnLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnRG9Zb3VyQmVhdXR5J1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufSkoKTtcclxuXG4oZnVuY3Rpb24oKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FwcC5sYWInKVxyXG4gICAgICAgIC5jb250cm9sbGVyKCdMYWJDb250cm9sbGVyJywgTGFiQ29udHJvbGxlcik7XHJcblxyXG4gICAgTGFiQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnXTtcclxuXHJcbiAgICAvKiBAbmdJbmplY3QgKi9cclxuICAgIGZ1bmN0aW9uIExhYkNvbnRyb2xsZXIoJHNjb3BlKSB7XHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS5jaG9pY2VzID0ge307XHJcbiAgICB9XHJcblxyXG59KSgpO1xyXG5cbihmdW5jdGlvbigpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwLmxhYicpXHJcbiAgICAgICAgLnJ1bihhcHBSdW4pO1xyXG5cclxuICAgIGFwcFJ1bi4kaW5qZWN0ID0gWydyb3V0ZXJIZWxwZXInXTtcclxuICAgIC8qIEBuZ0luamVjdCAqL1xyXG4gICAgZnVuY3Rpb24gYXBwUnVuKHJvdXRlckhlbHBlcikge1xyXG4gICAgICAgIHJvdXRlckhlbHBlci5jb25maWd1cmVTdGF0ZXMoZ2V0U3RhdGVzKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldFN0YXRlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZTogJ2xhYicsXHJcbiAgICAgICAgICAgICAgICBjb25maWc6IHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6ICcvbGFiJyxcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9sYWIvbGFiLnZpZXcuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0xhYkNvbnRyb2xsZXInLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2xhYlZtJyxcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0RvWW91ckJlYXV0eSAtIExhYidcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn0pKCk7XHJcblxuKGZ1bmN0aW9uKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXIubW9kdWxlKCdhcHAubGF5b3V0JylcclxuICAgICAgICAgIC5jb250cm9sbGVyKCdIZWFkZXJDb250cm9sbGVyJywgSGVhZGVyQ29udHJvbGxlcik7XHJcblxyXG4gICAgSGVhZGVyQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnXTtcclxuXHJcbiAgICAvKiBAbmdJbmplY3QgKi9cclxuICAgIGZ1bmN0aW9uIEhlYWRlckNvbnRyb2xsZXIoJHNjb3BlKSB7XHJcbiAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICB9XHJcblxyXG59KSgpO1xyXG5cbihmdW5jdGlvbigpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwLmxhYi5hdHRyaWJ1dGVzJylcclxuICAgICAgICAuY29udHJvbGxlcignQXR0cmlidXRlc0NvbnRyb2xsZXInLCBBdHRyaWJ1dGVzQ29udHJvbGxlcik7XHJcblxyXG4gICAgQXR0cmlidXRlc0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRzdGF0ZScsICdzbW9vdGhTY3JvbGwnLCAnJGZpbHRlcicsICckd2luZG93JywgJyRkb2N1bWVudCddO1xyXG4gICAgLyogQG5nSW5qZWN0ICovXHJcbiAgICBmdW5jdGlvbiBBdHRyaWJ1dGVzQ29udHJvbGxlcigkc2NvcGUsICRzdGF0ZSwgc21vb3RoU2Nyb2xsLCAkZmlsdGVyLCAkd2luZG93LCAkZG9jdW1lbnQpIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLnByb2R1Y3QgPSBudWxsO1xyXG4gICAgICAgIHZtLmF0dHJpYnV0ZXMgPSBbXTtcclxuICAgICAgICB2bS5nZXRGb3JtID0gZ2V0Rm9ybTtcclxuICAgICAgICB2bS5nZXRSZXN1bHRWaWV3ID0gZ2V0UmVzdWx0VmlldztcclxuICAgICAgICB2bS5jaG9pY2VWYWxpZGF0ZSA9IGNob2ljZVZhbGlkYXRlO1xyXG4gICAgICAgIHZtLnJlbmRlciA9IHJlbmRlcjtcclxuICAgICAgICB2bS5nb1RvTmV4dCA9IGdvVG9OZXh0O1xyXG5cclxuICAgICAgICAkd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgY2hlY2tQb3MpO1xyXG5cclxuICAgICAgICBhY3RpdmF0ZSgpO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcclxuICAgICAgICAgIGlmICh0eXBlb2YgJHNjb3BlLmxhYlZtLmNob2ljZXMucHJvZHVjdCA9PT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICAkc3RhdGUuZ28oJ2xhYi5wcm9kdWN0cycpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB2bS5wcm9kdWN0ID0gJHNjb3BlLmxhYlZtLmNob2ljZXMucHJvZHVjdDtcclxuICAgICAgICAgIHZtLmF0dHJpYnV0ZXMgPSAkZmlsdGVyKCdvcmRlckJ5Jykodm0ucHJvZHVjdC5hdHRyaWJ1dGVzLCAnb3JkZXInKTtcclxuICAgICAgICAgIHZtLmN1cnJlbnQgPSB2bS5hdHRyaWJ1dGVzWzBdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0Rm9ybShhdHRyaWJ1dGUpIHtcclxuICAgICAgICAgIHJldHVybiBcImFwcC9sYWIvYXR0cmlidXRlcy9mb3Jtcy9cIiArIGF0dHJpYnV0ZS5mb3JtICsgXCIvXCIgKyAgYXR0cmlidXRlLmZvcm0gKyBcIi52aWV3Lmh0bWxcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFJlc3VsdFZpZXcocHJvZHVjdCkge1xyXG4gICAgICAgICAgcmV0dXJuIFwiYXBwL2xhYi9hdHRyaWJ1dGVzL3Jlc3VsdHMvXCIgKyBwcm9kdWN0Lm5hbWUgKyBcIi9cIiArIHByb2R1Y3QubmFtZSArIFwiLnZpZXcuaHRtbFwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gY2hvaWNlVmFsaWRhdGUoYXR0cmlidXRlKSB7XHJcbiAgICAgICAgICByZXR1cm4gdHlwZW9mICRzY29wZS5sYWJWbS5jaG9pY2VzW2F0dHJpYnV0ZS5uYW1lXSAhPT0gXCJ1bmRlZmluZWRcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGNoZWNrUG9zKGUpIHtcclxuICAgICAgICAgIHZhciBpID0gdm0uYXR0cmlidXRlcy5sZW5ndGg7XHJcbiAgICAgICAgICB2YXIgbm90Rm91bmQgPSB0cnVlO1xyXG4gICAgICAgICAgd2hpbGUgKGkgPiAwICYmIG5vdEZvdW5kKSB7XHJcbiAgICAgICAgICAgIGlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh2bS5hdHRyaWJ1dGVzW2ktMV0ubmFtZSkgJiYgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodm0uYXR0cmlidXRlc1tpLTFdLm5hbWUpLm9mZnNldFRvcCAtIDIwMCA8PSAkd2luZG93LnBhZ2VZT2Zmc2V0KSB7XHJcbiAgICAgICAgICAgICAgdm0uY3VycmVudCA9IHZtLmF0dHJpYnV0ZXNbaS0xXTtcclxuICAgICAgICAgICAgICBub3RGb3VuZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICRzY29wZS4kYXBwbHkoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpLS07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiByZW5kZXIoYXR0cmlidXRlKSB7XHJcbiAgICAgICAgICBpZiAoYXR0cmlidXRlLm5hbWUgIT09IHZtLmN1cnJlbnQubmFtZSkge1xyXG4gICAgICAgICAgICBnb1RvKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyMnICsgYXR0cmlidXRlLm5hbWUpKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdvVG9OZXh0KGN1cnJlbnQpIHtcclxuICAgICAgICAgIHZhciBuZXh0RWxtbnQgPSBhbmd1bGFyLmVsZW1lbnQoY3VycmVudCkubmV4dCgpO1xyXG4gICAgICAgICAgZ29UbyhuZXh0RWxtbnRbMF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ29UbyhlbG1udCkge1xyXG4gICAgICAgICAgc21vb3RoU2Nyb2xsKGVsbW50LCB7XHJcbiAgICAgICAgICAgICBvZmZzZXQ6IDE4MCxcclxuICAgICAgICAgICAgIGR1cmF0aW9uOiAxMDAwLFxyXG4gICAgICAgICAgICAgZWFzaW5nOiAnZWFzZU91dEN1YmljJ1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkc2NvcGUuJG9uKFwiJGRlc3Ryb3lcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAkd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgY2hlY2tQb3MpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxufSkoKTtcclxuXG4oZnVuY3Rpb24oKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FwcC5sYWIuYXR0cmlidXRlcycpXHJcbiAgICAgICAgLnJ1bihhcHBSdW4pO1xyXG5cclxuICAgIGFwcFJ1bi4kaW5qZWN0ID0gWydyb3V0ZXJIZWxwZXInXTtcclxuICAgIC8qIEBuZ0luamVjdCAqL1xyXG4gICAgZnVuY3Rpb24gYXBwUnVuKHJvdXRlckhlbHBlcikge1xyXG4gICAgICAgIHJvdXRlckhlbHBlci5jb25maWd1cmVTdGF0ZXMoZ2V0U3RhdGVzKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldFN0YXRlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZTogJ2xhYi5hdHRyaWJ1dGVzJyxcclxuICAgICAgICAgICAgICAgIGNvbmZpZzoge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogJy9hdHRyaWJ1dGVzJyxcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0RvWW91ckJlYXV0eSAtIGF0dHJpYnV0ZXMnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdBdHRyaWJ1dGVzQ29udHJvbGxlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAnYXR0cmlidXRlc1ZtJyxcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9sYWIvYXR0cmlidXRlcy9hdHRyaWJ1dGVzLnZpZXcuaHRtbCdcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn0pKCk7XHJcblxuKGZ1bmN0aW9uKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhcHAubGFiLnByb2R1Y3RzJylcclxuICAgICAgICAuY29udHJvbGxlcignUHJvZHVjdHNDb250cm9sbGVyJywgUHJvZHVjdHNDb250cm9sbGVyKTtcclxuXHJcbiAgICBQcm9kdWN0c0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRzdGF0ZScsICdkYXRhc2VydmljZSddO1xyXG5cclxuICAgIC8qIEBuZ0luamVjdCAqL1xyXG4gICAgZnVuY3Rpb24gUHJvZHVjdHNDb250cm9sbGVyKCRzY29wZSwgJHN0YXRlLCBkYXRhc2VydmljZSkge1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcblxyXG4gICAgICAgIHZtLnNlbGVjdCA9IHNlbGVjdDtcclxuXHJcbiAgICAgICAgYWN0aXZhdGUoKTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XHJcbiAgICAgICAgICBkYXRhc2VydmljZS5yZWFkeSgpLnRoZW4oZ2V0UHJvZHVjdHMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0UHJvZHVjdHMoKSB7XHJcbiAgICAgICAgICB2bS5wcm9kdWN0cyA9IGRhdGFzZXJ2aWNlLmdldFByb2R1Y3RzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBzZWxlY3QocHJvZHVjdCkge1xyXG4gICAgICAgICAgJHNjb3BlLmxhYlZtLmNob2ljZXMucHJvZHVjdCA9IHByb2R1Y3Q7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufSkoKTtcclxuXG4oZnVuY3Rpb24oKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FwcC5sYWIucHJvZHVjdHMnKVxyXG4gICAgICAgIC5ydW4oYXBwUnVuKTtcclxuXHJcbiAgICBhcHBSdW4uJGluamVjdCA9IFsncm91dGVySGVscGVyJ107XHJcbiAgICAvKiBAbmdJbmplY3QgKi9cclxuICAgIGZ1bmN0aW9uIGFwcFJ1bihyb3V0ZXJIZWxwZXIpIHtcclxuICAgICAgICByb3V0ZXJIZWxwZXIuY29uZmlndXJlU3RhdGVzKGdldFN0YXRlcygpKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRTdGF0ZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc3RhdGU6ICdsYWIucHJvZHVjdHMnLFxyXG4gICAgICAgICAgICAgICAgY29uZmlnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnL3Byb2R1Y3RzJyxcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0RvWW91ckJlYXV0eSAtIHByb2R1Y3RzJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnUHJvZHVjdHNDb250cm9sbGVyJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICdwcm9kdWN0c1ZtJyxcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9sYWIvcHJvZHVjdHMvcHJvZHVjdHMudmlldy5odG1sJ1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufSkoKTtcclxuXG4oZnVuY3Rpb24oKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FwcC5sYWIuYXR0cmlidXRlcycpXHJcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0J0blJhZGlvQ29udHJvbGxlcicsIEJ0blJhZGlvQ29udHJvbGxlcik7XHJcblxyXG4gICAgQnRuUmFkaW9Db250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckZmlsdGVyJ107XHJcblxyXG4gICAgLyogQG5nSW5qZWN0ICovXHJcbiAgICBmdW5jdGlvbiBCdG5SYWRpb0NvbnRyb2xsZXIoJHNjb3BlLCAkZmlsdGVyKSB7XHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS5jaG9pY2UgPSBudWxsO1xyXG4gICAgICAgIHZtLmltZ1ByZXZpZXcgPSBudWxsO1xyXG4gICAgICAgIHZtLnNldENob2ljZSA9IHNldENob2ljZTtcclxuICAgICAgICB2bS5zZXRJbWdQcmV2aWV3ID0gc2V0SW1nUHJldmlldztcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc2V0Q2hvaWNlKGF0dHJpYnV0ZUNob2ljZWQpIHtcclxuICAgICAgICAgIHZtLmNob2ljZSA9IGF0dHJpYnV0ZUNob2ljZWQ7XHJcbiAgICAgICAgICAkc2NvcGUubGFiVm0uY2hvaWNlc1t2bS5hdHRyaWJ1dGUubmFtZV0gPSBhdHRyaWJ1dGVDaG9pY2VkO1xyXG4gICAgICAgICAgc2V0SW1nUHJldmlldyh2bS5jaG9pY2UuaW1nKTtcclxuXHJcbiAgICAgICAgICAkc2NvcGUuYXR0cmlidXRlc1ZtLmdvVG9OZXh0KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyMnICsgdm0uYXR0cmlidXRlLm5hbWUpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNldEltZ1ByZXZpZXcoaW1nKSB7XHJcbiAgICAgICAgICBpZiAodm0uYXR0cmlidXRlLmhhdmVJbWdQcmV2aWV3KSB7XHJcbiAgICAgICAgICAgIHZtLmltZ1ByZXZpZXcgPSBpbWc7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufSkoKTtcclxuXG4oZnVuY3Rpb24oKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FwcC5sYWIuYXR0cmlidXRlcycpXHJcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0NvbG9yQ29udHJvbGxlcicsIENvbG9yQ29udHJvbGxlcik7XHJcblxyXG4gICAgQ29sb3JDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZSddO1xyXG5cclxuICAgIC8qIEBuZ0luamVjdCAqL1xyXG4gICAgZnVuY3Rpb24gQ29sb3JDb250cm9sbGVyKCRzY29wZSkge1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS5jaG9pY2UgPSBudWxsO1xyXG4gICAgICAgIHZtLnNldENob2ljZSA9IHNldENob2ljZTtcclxuICAgICAgICB2bS5zZXRPcGFjaXR5ID0gc2V0T3BhY2l0eTtcclxuICAgICAgICB2bS5zYXZlQ2hvaWNlID0gc2F2ZUNob2ljZTtcclxuICAgICAgICB2bS5wZXJjZW50ID0gMTAwO1xyXG5cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc2V0Q2hvaWNlKGF0dHJpYnV0ZUNob2ljZWQpIHtcclxuICAgICAgICAgIGlmICh2bS5jaG9pY2UpIHtcclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Zvcm0tY29sb3ItJyArIHZtLmNob2ljZSkuc3R5bGUub3BhY2l0eSA9IDE7XHJcbiAgICAgICAgICAgIHZtLnBlcmNlbnQgPSAxMDA7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB2bS5jaG9pY2UgPSBhdHRyaWJ1dGVDaG9pY2VkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc2F2ZUNob2ljZSgpIHtcclxuICAgICAgICAgICRzY29wZS5sYWJWbS5jaG9pY2VzW3ZtLmF0dHJpYnV0ZS5uYW1lXSA9IHt2YWx1ZTogdm0uY2hvaWNlLCBwZXJjZW50OiB2bS5wZXJjZW50fTtcclxuICAgICAgICAgICRzY29wZS5hdHRyaWJ1dGVzVm0uZ29Ub05leHQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignIycgKyB2bS5hdHRyaWJ1dGUubmFtZSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc2V0T3BhY2l0eSgpIHtcclxuICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmb3JtLWNvbG9yLScgKyB2bS5jaG9pY2UpLnN0eWxlLm9wYWNpdHkgPSB2bS5wZXJjZW50IC8gMTAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG59KSgpO1xyXG5cbihmdW5jdGlvbigpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwLmxhYi5hdHRyaWJ1dGVzJylcclxuICAgICAgICAuY29udHJvbGxlcignQ2hlY2tib3hDb250cm9sbGVyJywgQ2hlY2tib3hDb250cm9sbGVyKTtcclxuXHJcbiAgICBDaGVja2JveENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJ107XHJcblxyXG4gICAgLyogQG5nSW5qZWN0ICovXHJcbiAgICBmdW5jdGlvbiBDaGVja2JveENvbnRyb2xsZXIoJHNjb3BlKSB7XHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS5jaG9pY2VzID0gW107XHJcbiAgICAgICAgdm0uZXhpc3RzID0gZXhpc3RzO1xyXG4gICAgICAgIHZtLnRvZ2dsZSA9IHRvZ2dsZTtcclxuICAgICAgICB2bS5zYXZlQ2hvaWNlcyA9IHNhdmVDaG9pY2VzO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBleGlzdHModmFsdWUpIHtcclxuICAgICAgICAgIHJldHVybiB2bS5jaG9pY2VzLmluZGV4T2YodmFsdWUpID4gLTE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiB0b2dnbGUodmFsdWUpIHtcclxuICAgICAgICAgIHZhciBpZHggPSB2bS5jaG9pY2VzLmluZGV4T2YodmFsdWUpO1xyXG4gICAgICAgICAgaWYgKGlkeCA+IC0xKSB7XHJcbiAgICAgICAgICAgIHZtLmNob2ljZXMuc3BsaWNlKGlkeCwgMSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB2bS5jaG9pY2VzLnB1c2godmFsdWUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNhdmVDaG9pY2VzKCkge1xyXG4gICAgICAgICAgJHNjb3BlLmxhYlZtLmNob2ljZXNbdm0uYXR0cmlidXRlLm5hbWVdID0gdm0uY2hvaWNlcztcclxuICAgICAgICAgICRzY29wZS5hdHRyaWJ1dGVzVm0uZ29Ub05leHQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignIycgKyB2bS5hdHRyaWJ1dGUubmFtZSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG59KSgpO1xyXG5cbihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGFuZ3VsYXJcclxuICAgICAgLm1vZHVsZSgnYXBwLmxhYi5hdHRyaWJ1dGVzJylcclxuICAgICAgLmNvbnRyb2xsZXIoJ0ltZ1JhZGlvQ29udHJvbGxlcicsIEltZ1JhZGlvQ29udHJvbGxlcik7XHJcblxyXG4gIEltZ1JhZGlvQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnXTtcclxuXHJcbiAgLyogQG5nSW5qZWN0ICovXHJcbiAgZnVuY3Rpb24gSW1nUmFkaW9Db250cm9sbGVyKCRzY29wZSkge1xyXG4gICAgdmFyIHZtID0gdGhpcztcclxuICAgIHZtLmNob2ljZSA9IG51bGw7XHJcbiAgICB2bS5zZXRDaG9pY2UgPSBzZXRDaG9pY2U7XHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIHNldENob2ljZShhdHRyaWJ1dGVDaG9pY2VkKSB7XHJcbiAgICAgIHZtLmNob2ljZSA9IGF0dHJpYnV0ZUNob2ljZWQ7XHJcbiAgICAgICRzY29wZS5sYWJWbS5jaG9pY2VzW3ZtLmF0dHJpYnV0ZS5uYW1lXSA9IGF0dHJpYnV0ZUNob2ljZWQ7XHJcbiAgICAgICRzY29wZS5hdHRyaWJ1dGVzVm0uZ29Ub05leHQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignIycgKyB2bS5hdHRyaWJ1dGUubmFtZSkpO1xyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG59KSgpO1xyXG5cbihmdW5jdGlvbigpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwLmxhYi5hdHRyaWJ1dGVzJylcclxuICAgICAgICAuY29udHJvbGxlcignSW5wdXRUZXh0Q29udHJvbGxlcicsIElucHV0VGV4dENvbnRyb2xsZXIpO1xyXG5cclxuICAgIElucHV0VGV4dENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJ107XHJcblxyXG4gICAgLyogQG5nSW5qZWN0ICovXHJcbiAgICBmdW5jdGlvbiBJbnB1dFRleHRDb250cm9sbGVyKCRzY29wZSkge1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgdm0uY2hvaWNlID0gbnVsbDtcclxuICAgICAgICB2bS5zZXRDaG9pY2UgPSBzZXRDaG9pY2U7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNldENob2ljZSgpIHtcclxuICAgICAgICAgIGlmICh2bS5jaG9pY2UgIT09IFwiXCIgJiYgdm0uY2hvaWNlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5sYWJWbS5jaG9pY2VzW3ZtLmF0dHJpYnV0ZS5uYW1lXSA9IHZtLmNob2ljZTtcclxuICAgICAgICAgICAgJHNjb3BlLmF0dHJpYnV0ZXNWbS5nb1RvTmV4dChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjJyArIHZtLmF0dHJpYnV0ZS5uYW1lKSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBkZWxldGUgJHNjb3BlLmxhYlZtLmNob2ljZXNbdm0uYXR0cmlidXRlLm5hbWVdO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn0pKCk7XHJcblxuKGZ1bmN0aW9uKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhcHAubGFiLmF0dHJpYnV0ZXMnKVxyXG4gICAgICAgIC5jb250cm9sbGVyKCdSYWRpb1NsaWRlckNvbnRyb2xsZXInLCBSYWRpb1NsaWRlckNvbnRyb2xsZXIpO1xyXG5cclxuICAgIFJhZGlvU2xpZGVyQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnXTtcclxuXHJcbiAgICAvKiBAbmdJbmplY3QgKi9cclxuICAgIGZ1bmN0aW9uIFJhZGlvU2xpZGVyQ29udHJvbGxlcigkc2NvcGUpIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgdm0uY2hvaWNlID0gbnVsbDtcclxuICAgICAgICB2bS5zZXRDaG9pY2UgPSBzZXRDaG9pY2U7XHJcbiAgICAgICAgdm0uc2F2ZUNob2ljZSA9IHNhdmVDaG9pY2U7XHJcbiAgICAgICAgdm0ucGVyY2VudCA9IDEwMDtcclxuXHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNldENob2ljZShhdHRyaWJ1dGVDaG9pY2VkKSB7XHJcbiAgICAgICAgICBpZiAodm0uY2hvaWNlKSB7XHJcbiAgICAgICAgICAgIHZtLnBlcmNlbnQgPSAxMDA7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB2bS5jaG9pY2UgPSBhdHRyaWJ1dGVDaG9pY2VkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc2F2ZUNob2ljZSgpIHtcclxuICAgICAgICAgICRzY29wZS5sYWJWbS5jaG9pY2VzW3ZtLmF0dHJpYnV0ZS5uYW1lXSA9IHt2YWx1ZTogdm0uY2hvaWNlLCBwZXJjZW50OiB2bS5wZXJjZW50fTtcclxuICAgICAgICAgICRzY29wZS5hdHRyaWJ1dGVzVm0uZ29Ub05leHQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignIycgKyB2bS5hdHRyaWJ1dGUubmFtZSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn0pKCk7XHJcblxuKGZ1bmN0aW9uKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhcHAubGFiLmF0dHJpYnV0ZXMnKVxyXG4gICAgICAgIC5jb250cm9sbGVyKCdDcmVhbUNvbnRyb2xsZXInLCBDcmVhbUNvbnRyb2xsZXIpO1xyXG5cclxuICAgIENyZWFtQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnXTtcclxuXHJcbiAgICAvKiBAbmdJbmplY3QgKi9cclxuICAgIGZ1bmN0aW9uIENyZWFtQ29udHJvbGxlcigkc2NvcGUpIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxufSkoKTtcclxuIiwiKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwLmNvcmUnKVxyXG4gICAgICAgIC5mYWN0b3J5KCdkYXRhc2VydmljZScsIGRhdGFzZXJ2aWNlKTtcclxuXHJcbiAgICBkYXRhc2VydmljZS4kaW5qZWN0ID0gWyckaHR0cCcsICckcScsICdleGNlcHRpb24nLCAnbG9nZ2VyJ107XHJcbiAgICAvKiBAbmdJbmplY3QgKi9cclxuICAgIGZ1bmN0aW9uIGRhdGFzZXJ2aWNlKCRodHRwLCAkcSwgZXhjZXB0aW9uLCBsb2dnZXIpIHtcclxuICAgICAgICB2YXIganNvblVSTCA9ICcvcmVzc291cmNlcy9wcm9kdWN0cy5qc29uJztcclxuICAgICAgICB2YXIgcHJvbWlzZSA9ICRodHRwLmdldChqc29uVVJMKTtcclxuICAgICAgICB2YXIgZGF0YSA9IG51bGw7XHJcbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7XHJcbiAgICAgICAgICByZWFkeTogcmVhZHksXHJcbiAgICAgICAgICBnZXRQcm9kdWN0czogZ2V0UHJvZHVjdHNcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4gc2VydmljZTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0UHJvZHVjdHMoKSB7XHJcbiAgICAgICAgICByZXR1cm4gZGF0YS5wcm9kdWN0cztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJlYWR5KCkge1xyXG4gICAgICAgICAgcmV0dXJuIHByb21pc2UudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcclxuICAgICAgICAgICAgZGF0YSA9IHJlc3VsdC5kYXRhO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoJ0ltcG9zc2libGUgZGUgcsOpY3Vww6lyZXIgbGVzIGRvbm7DqWVzJyk7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KSgpO1xyXG4iLCIoZnVuY3Rpb24gKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBhbmd1bGFyLm1vZHVsZSgnYXBwLmNvcmUnKVxyXG4gICAgLmZpbHRlcignZ2V0QnlOYW1lJywgZ2V0QnlOYW1lKTtcclxuXHJcbiAgZnVuY3Rpb24gZ2V0QnlOYW1lKCkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0LCBuYW1lKSB7XHJcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBpbnB1dC5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmIChpbnB1dFtpXS52YWx1ZSA9PSBuYW1lIHx8IGlucHV0W2ldLm5hbWUgPT0gbmFtZSkge1xyXG4gICAgICAgICAgcmV0dXJuIGlucHV0W2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICB9XHJcbn0pKCk7XHJcbiIsIihmdW5jdGlvbigpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyLm1vZHVsZSgnYmxvY2tzLmV4Y2VwdGlvbicsIFsnYmxvY2tzLmxvZ2dlciddKTtcclxufSkoKTtcclxuIiwiKGZ1bmN0aW9uKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXIubW9kdWxlKCdibG9ja3MubG9nZ2VyJywgW10pO1xyXG59KSgpO1xyXG4iLCIoZnVuY3Rpb24oKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhci5tb2R1bGUoJ2Jsb2Nrcy5yb3V0ZXInLCBbXHJcbiAgICAgICAgJ3VpLnJvdXRlcicsXHJcbiAgICAgICAgJ2Jsb2Nrcy5sb2dnZXInXHJcbiAgICBdKTtcclxufSkoKTtcclxuIiwiLy8gSW5jbHVkZSBpbiBpbmRleC5odG1sIHNvIHRoYXQgYXBwIGxldmVsIGV4Y2VwdGlvbnMgYXJlIGhhbmRsZWQuXHJcbi8vIEV4Y2x1ZGUgZnJvbSB0ZXN0UnVubmVyLmh0bWwgd2hpY2ggc2hvdWxkIHJ1biBleGFjdGx5IHdoYXQgaXQgd2FudHMgdG8gcnVuXHJcbihmdW5jdGlvbigpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYmxvY2tzLmV4Y2VwdGlvbicpXHJcbiAgICAgICAgLnByb3ZpZGVyKCdleGNlcHRpb25IYW5kbGVyJywgZXhjZXB0aW9uSGFuZGxlclByb3ZpZGVyKVxyXG4gICAgICAgIC5jb25maWcoY29uZmlnKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE11c3QgY29uZmlndXJlIHRoZSBleGNlcHRpb24gaGFuZGxpbmdcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gZXhjZXB0aW9uSGFuZGxlclByb3ZpZGVyKCkge1xyXG4gICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xyXG4gICAgICAgIHRoaXMuY29uZmlnID0ge1xyXG4gICAgICAgICAgICBhcHBFcnJvclByZWZpeDogdW5kZWZpbmVkXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5jb25maWd1cmUgPSBmdW5jdGlvbiAoYXBwRXJyb3JQcmVmaXgpIHtcclxuICAgICAgICAgICAgdGhpcy5jb25maWcuYXBwRXJyb3JQcmVmaXggPSBhcHBFcnJvclByZWZpeDtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLiRnZXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtjb25maWc6IHRoaXMuY29uZmlnfTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGNvbmZpZy4kaW5qZWN0ID0gWyckcHJvdmlkZSddO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29uZmlndXJlIGJ5IHNldHRpbmcgYW4gb3B0aW9uYWwgc3RyaW5nIHZhbHVlIGZvciBhcHBFcnJvclByZWZpeC5cclxuICAgICAqIEFjY2Vzc2libGUgdmlhIGNvbmZpZy5hcHBFcnJvclByZWZpeCAodmlhIGNvbmZpZyB2YWx1ZSkuXHJcbiAgICAgKiBAcGFyYW0gIHtPYmplY3R9ICRwcm92aWRlXHJcbiAgICAgKi9cclxuICAgIC8qIEBuZ0luamVjdCAqL1xyXG4gICAgZnVuY3Rpb24gY29uZmlnKCRwcm92aWRlKSB7XHJcbiAgICAgICAgJHByb3ZpZGUuZGVjb3JhdG9yKCckZXhjZXB0aW9uSGFuZGxlcicsIGV4dGVuZEV4Y2VwdGlvbkhhbmRsZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIGV4dGVuZEV4Y2VwdGlvbkhhbmRsZXIuJGluamVjdCA9IFsnJGRlbGVnYXRlJywgJ2V4Y2VwdGlvbkhhbmRsZXInLCAnbG9nZ2VyJ107XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFeHRlbmQgdGhlICRleGNlcHRpb25IYW5kbGVyIHNlcnZpY2UgdG8gYWxzbyBkaXNwbGF5IGEgdG9hc3QuXHJcbiAgICAgKiBAcGFyYW0gIHtPYmplY3R9ICRkZWxlZ2F0ZVxyXG4gICAgICogQHBhcmFtICB7T2JqZWN0fSBleGNlcHRpb25IYW5kbGVyXHJcbiAgICAgKiBAcGFyYW0gIHtPYmplY3R9IGxvZ2dlclxyXG4gICAgICogQHJldHVybiB7RnVuY3Rpb259IHRoZSBkZWNvcmF0ZWQgJGV4Y2VwdGlvbkhhbmRsZXIgc2VydmljZVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBleHRlbmRFeGNlcHRpb25IYW5kbGVyKCRkZWxlZ2F0ZSwgZXhjZXB0aW9uSGFuZGxlciwgbG9nZ2VyKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGV4Y2VwdGlvbiwgY2F1c2UpIHtcclxuICAgICAgICAgICAgdmFyIGFwcEVycm9yUHJlZml4ID0gZXhjZXB0aW9uSGFuZGxlci5jb25maWcuYXBwRXJyb3JQcmVmaXggfHwgJyc7XHJcbiAgICAgICAgICAgIHZhciBlcnJvckRhdGEgPSB7ZXhjZXB0aW9uOiBleGNlcHRpb24sIGNhdXNlOiBjYXVzZX07XHJcbiAgICAgICAgICAgIGV4Y2VwdGlvbi5tZXNzYWdlID0gYXBwRXJyb3JQcmVmaXggKyBleGNlcHRpb24ubWVzc2FnZTtcclxuICAgICAgICAgICAgJGRlbGVnYXRlKGV4Y2VwdGlvbiwgY2F1c2UpO1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQ291bGQgYWRkIHRoZSBlcnJvciB0byBhIHNlcnZpY2UncyBjb2xsZWN0aW9uLFxyXG4gICAgICAgICAgICAgKiBhZGQgZXJyb3JzIHRvICRyb290U2NvcGUsIGxvZyBlcnJvcnMgdG8gcmVtb3RlIHdlYiBzZXJ2ZXIsXHJcbiAgICAgICAgICAgICAqIG9yIGxvZyBsb2NhbGx5LiBPciB0aHJvdyBoYXJkLiBJdCBpcyBlbnRpcmVseSB1cCB0byB5b3UuXHJcbiAgICAgICAgICAgICAqIHRocm93IGV4Y2VwdGlvbjtcclxuICAgICAgICAgICAgICpcclxuICAgICAgICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICAgICAgICogICAgIHRocm93IHsgbWVzc2FnZTogJ2Vycm9yIG1lc3NhZ2Ugd2UgYWRkZWQnIH07XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoZXhjZXB0aW9uLm1lc3NhZ2UsIGVycm9yRGF0YSk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufSkoKTtcclxuIiwiKGZ1bmN0aW9uKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdibG9ja3MuZXhjZXB0aW9uJylcclxuICAgICAgICAuZmFjdG9yeSgnZXhjZXB0aW9uJywgZXhjZXB0aW9uKTtcclxuXHJcbiAgICAvKiBAbmdJbmplY3QgKi9cclxuICAgIGZ1bmN0aW9uIGV4Y2VwdGlvbigkcSwgbG9nZ2VyKSB7XHJcbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7XHJcbiAgICAgICAgICAgIGNhdGNoZXI6IGNhdGNoZXJcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBzZXJ2aWNlO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBjYXRjaGVyKG1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0aHJvd25EZXNjcmlwdGlvbjtcclxuICAgICAgICAgICAgICAgIHZhciBuZXdNZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgaWYgKGUuZGF0YSAmJiBlLmRhdGEuZGVzY3JpcHRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvd25EZXNjcmlwdGlvbiA9ICdcXG4nICsgZS5kYXRhLmRlc2NyaXB0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld01lc3NhZ2UgPSBtZXNzYWdlICsgdGhyb3duRGVzY3JpcHRpb247XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlLmRhdGEuZGVzY3JpcHRpb24gPSBuZXdNZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKG5ld01lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChlKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pKCk7XHJcbiIsIihmdW5jdGlvbigpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYmxvY2tzLmxvZ2dlcicpXHJcbiAgICAgICAgLmZhY3RvcnkoJ2xvZ2dlcicsIGxvZ2dlcik7XHJcblxyXG4gICAgbG9nZ2VyLiRpbmplY3QgPSBbJyRsb2cnXTtcclxuXHJcbiAgICAvKiBAbmdJbmplY3QgKi9cclxuICAgIGZ1bmN0aW9uIGxvZ2dlcigkbG9nLCB0b2FzdHIpIHtcclxuICAgICAgICB2YXIgc2VydmljZSA9IHtcclxuICAgICAgICAgICAgZXJyb3IgICA6IGVycm9yLFxyXG4gICAgICAgICAgICBpbmZvICAgIDogaW5mbyxcclxuICAgICAgICAgICAgc3VjY2VzcyA6IHN1Y2Nlc3MsXHJcbiAgICAgICAgICAgIHdhcm5pbmcgOiB3YXJuaW5nLFxyXG5cclxuICAgICAgICAgICAgLy8gc3RyYWlnaHQgdG8gY29uc29sZTsgYnlwYXNzIHRvYXN0clxyXG4gICAgICAgICAgICBsb2cgICAgIDogJGxvZy5sb2dcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4gc2VydmljZTtcclxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZXJyb3IobWVzc2FnZSwgZGF0YSwgdGl0bGUpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlLCB0aXRsZSk7XHJcbiAgICAgICAgICAgICRsb2cuZXJyb3IoJ0Vycm9yOiAnICsgbWVzc2FnZSwgZGF0YSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBpbmZvKG1lc3NhZ2UsIGRhdGEsIHRpdGxlKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhtZXNzYWdlLCB0aXRsZSk7XHJcbiAgICAgICAgICAgICRsb2cuaW5mbygnSW5mbzogJyArIG1lc3NhZ2UsIGRhdGEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc3VjY2VzcyhtZXNzYWdlLCBkYXRhLCB0aXRsZSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhtZXNzYWdlLCB0aXRsZSk7XHJcbiAgICAgICAgICAgICRsb2cuaW5mbygnU3VjY2VzczogJyArIG1lc3NhZ2UsIGRhdGEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlLCBkYXRhLCB0aXRsZSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4obWVzc2FnZSwgdGl0bGUpO1xyXG4gICAgICAgICAgICAkbG9nLndhcm4oJ1dhcm5pbmc6ICcgKyBtZXNzYWdlLCBkYXRhKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0oKSk7XHJcbiIsIi8qIEhlbHAgY29uZmlndXJlIHRoZSBzdGF0ZS1iYXNlIHVpLnJvdXRlciAqL1xyXG4oZnVuY3Rpb24oKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2Jsb2Nrcy5yb3V0ZXInKVxyXG4gICAgICAgIC5wcm92aWRlcigncm91dGVySGVscGVyJywgcm91dGVySGVscGVyUHJvdmlkZXIpO1xyXG5cclxuICAgIHJvdXRlckhlbHBlclByb3ZpZGVyLiRpbmplY3QgPSBbJyRsb2NhdGlvblByb3ZpZGVyJywgJyRzdGF0ZVByb3ZpZGVyJywgJyR1cmxSb3V0ZXJQcm92aWRlciddO1xyXG4gICAgLyogQG5nSW5qZWN0ICovXHJcbiAgICBmdW5jdGlvbiByb3V0ZXJIZWxwZXJQcm92aWRlcigkbG9jYXRpb25Qcm92aWRlciwgJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlcikge1xyXG4gICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xyXG4gICAgICAgIHZhciBjb25maWcgPSB7XHJcbiAgICAgICAgICAgIGRvY1RpdGxlOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgIHJlc29sdmVBbHdheXM6IHt9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHtcclxuICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgcmVxdWlyZUJhc2U6IGZhbHNlXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuY29uZmlndXJlID0gZnVuY3Rpb24oY2ZnKSB7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKGNvbmZpZywgY2ZnKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLiRnZXQgPSBSb3V0ZXJIZWxwZXI7XHJcbiAgICAgICAgUm91dGVySGVscGVyLiRpbmplY3QgPSBbJyRsb2NhdGlvbicsICckcm9vdFNjb3BlJywgJyRzdGF0ZScsICdsb2dnZXInXTtcclxuICAgICAgICAvKiBAbmdJbmplY3QgKi9cclxuICAgICAgICBmdW5jdGlvbiBSb3V0ZXJIZWxwZXIoJGxvY2F0aW9uLCAkcm9vdFNjb3BlLCAkc3RhdGUsIGxvZ2dlcikge1xyXG4gICAgICAgICAgICB2YXIgaGFuZGxpbmdTdGF0ZUNoYW5nZUVycm9yID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHZhciBoYXNPdGhlcndpc2UgPSBmYWxzZTtcclxuICAgICAgICAgICAgdmFyIHN0YXRlQ291bnRzID0ge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JzOiAwLFxyXG4gICAgICAgICAgICAgICAgY2hhbmdlczogMFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdmFyIHNlcnZpY2UgPSB7XHJcbiAgICAgICAgICAgICAgICBjb25maWd1cmVTdGF0ZXM6IGNvbmZpZ3VyZVN0YXRlcyxcclxuICAgICAgICAgICAgICAgIGdldFN0YXRlczogZ2V0U3RhdGVzLFxyXG4gICAgICAgICAgICAgICAgc3RhdGVDb3VudHM6IHN0YXRlQ291bnRzXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBpbml0KCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gc2VydmljZTtcclxuXHJcbiAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vL1xyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gY29uZmlndXJlU3RhdGVzKHN0YXRlcywgb3RoZXJ3aXNlUGF0aCkge1xyXG4gICAgICAgICAgICAgICAgc3RhdGVzLmZvckVhY2goZnVuY3Rpb24oc3RhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5jb25maWcucmVzb2x2ZSA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKHN0YXRlLmNvbmZpZy5yZXNvbHZlIHx8IHt9LCBjb25maWcucmVzb2x2ZUFsd2F5cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoc3RhdGUuc3RhdGUsIHN0YXRlLmNvbmZpZyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGlmIChvdGhlcndpc2VQYXRoICYmICFoYXNPdGhlcndpc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBoYXNPdGhlcndpc2UgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2Uob3RoZXJ3aXNlUGF0aCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGhhbmRsZVJvdXRpbmdFcnJvcnMoKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBSb3V0ZSBjYW5jZWxsYXRpb246XHJcbiAgICAgICAgICAgICAgICAvLyBPbiByb3V0aW5nIGVycm9yLCBnbyB0byB0aGUgZGFzaGJvYXJkLlxyXG4gICAgICAgICAgICAgICAgLy8gUHJvdmlkZSBhbiBleGl0IGNsYXVzZSBpZiBpdCB0cmllcyB0byBkbyBpdCB0d2ljZS5cclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VFcnJvcicsXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oZXZlbnQsIHRvU3RhdGUsIHRvUGFyYW1zLCBmcm9tU3RhdGUsIGZyb21QYXJhbXMsIGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYW5kbGluZ1N0YXRlQ2hhbmdlRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZUNvdW50cy5lcnJvcnMrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxpbmdTdGF0ZUNoYW5nZUVycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gKHRvU3RhdGUgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0b1N0YXRlLnRpdGxlIHx8IHRvU3RhdGUubmFtZSB8fCB0b1N0YXRlLmxvYWRlZFRlbXBsYXRlVXJsKSkgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd1bmtub3duIHRhcmdldCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtc2cgPSAnRXJyb3Igcm91dGluZyB0byAnICsgZGVzdGluYXRpb24gKyAnLiAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChlcnJvci5kYXRhIHx8ICcnKSArICcuIDxici8+JyArIChlcnJvci5zdGF0dXNUZXh0IHx8ICcnKSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnOiAnICsgKGVycm9yLnN0YXR1cyB8fCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuaW5nKG1zZywgW3RvU3RhdGVdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy8nKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBpbml0KCkge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlUm91dGluZ0Vycm9ycygpO1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlRG9jVGl0bGUoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0U3RhdGVzKCkgeyByZXR1cm4gJHN0YXRlLmdldCgpOyB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVEb2NUaXRsZSgpIHtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VTdWNjZXNzJyxcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihldmVudCwgdG9TdGF0ZSwgdG9QYXJhbXMsIGZyb21TdGF0ZSwgZnJvbVBhcmFtcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZUNvdW50cy5jaGFuZ2VzKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsaW5nU3RhdGVDaGFuZ2VFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGl0bGUgPSBjb25maWcuZG9jVGl0bGUgKyAnICcgKyAodG9TdGF0ZS50aXRsZSB8fCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUudGl0bGUgPSB0aXRsZTsgLy8gZGF0YSBiaW5kIHRvIDx0aXRsZT5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KSgpO1xyXG4iLCIoZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICBhbmd1bGFyLm1vZHVsZSgnYXBwLmxhYi5hdHRyaWJ1dGVzJywgWydhcHAuY29yZSddKTtcclxuXHJcbn0pICgpO1xyXG4iLCIoZnVuY3Rpb24gKCkge1xyXG5cclxuICBhbmd1bGFyLm1vZHVsZSgnYXBwLmxhYi5wcm9kdWN0cycsIFsnYXBwLmNvcmUnXSk7XHJcblxyXG59KSgpO1xyXG4iLCIoZnVuY3Rpb24gKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcblxyXG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAuaG9tZXBhZ2UnLCBbXHJcbiAgICAnYXBwLmNvcmUnXHJcbiAgXSk7XHJcblxyXG59KSAoKTtcclxuIiwiKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcC5sYWInLCBbXHJcbiAgICAnYXBwLmNvcmUnLFxyXG4gICAgJ2FwcC5sYWIucHJvZHVjdHMnLFxyXG4gICAgJ2FwcC5sYWIuYXR0cmlidXRlcydcclxuICBdKTtcclxuXHJcbn0pKCk7XHJcbiIsIihmdW5jdGlvbigpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyLm1vZHVsZSgnYXBwLmxheW91dCcsIFtcclxuICAgICAgJ2FwcC5jb3JlJ1xyXG4gICAgXSk7XHJcbn0pKCk7XHJcbiIsIihmdW5jdGlvbiAoKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICBhbmd1bGFyLm1vZHVsZSgnYXBwLmhvbWVwYWdlJykuY29udHJvbGxlcignSG9tZUNvbnRyb2xsZXInLCBIb21lQ29udHJvbGxlcik7XHJcblxyXG4gIGZ1bmN0aW9uIEhvbWVDb250cm9sbGVyKCnCoHtcclxuICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICB2bS50aXRsZSA9ICdIb21lcGFnZSc7XHJcbiAgfVxyXG59KSgpO1xyXG4iLCIoZnVuY3Rpb24oKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FwcC5ob21lcGFnZScpXHJcbiAgICAgICAgLnJ1bihhcHBSdW4pO1xyXG5cclxuICAgIGFwcFJ1bi4kaW5qZWN0ID0gWydyb3V0ZXJIZWxwZXInXTtcclxuICAgIC8qIEBuZ0luamVjdCAqL1xyXG4gICAgZnVuY3Rpb24gYXBwUnVuKHJvdXRlckhlbHBlcikge1xyXG4gICAgICAgIHJvdXRlckhlbHBlci5jb25maWd1cmVTdGF0ZXMoZ2V0U3RhdGVzKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldFN0YXRlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZTogJ2hvbWVwYWdlJyxcclxuICAgICAgICAgICAgICAgIGNvbmZpZzoge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogJy8nLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL2hvbWVwYWdlL2hvbWVwYWdlLnZpZXcuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0hvbWVDb250cm9sbGVyJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICdob21lJyxcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0RvWW91ckJlYXV0eSdcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn0pKCk7XHJcbiIsIihmdW5jdGlvbigpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwLmxhYicpXHJcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0xhYkNvbnRyb2xsZXInLCBMYWJDb250cm9sbGVyKTtcclxuXHJcbiAgICBMYWJDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZSddO1xyXG5cclxuICAgIC8qIEBuZ0luamVjdCAqL1xyXG4gICAgZnVuY3Rpb24gTGFiQ29udHJvbGxlcigkc2NvcGUpIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLmNob2ljZXMgPSB7fTtcclxuICAgIH1cclxuXHJcbn0pKCk7XHJcbiIsIihmdW5jdGlvbigpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwLmxhYicpXHJcbiAgICAgICAgLnJ1bihhcHBSdW4pO1xyXG5cclxuICAgIGFwcFJ1bi4kaW5qZWN0ID0gWydyb3V0ZXJIZWxwZXInXTtcclxuICAgIC8qIEBuZ0luamVjdCAqL1xyXG4gICAgZnVuY3Rpb24gYXBwUnVuKHJvdXRlckhlbHBlcikge1xyXG4gICAgICAgIHJvdXRlckhlbHBlci5jb25maWd1cmVTdGF0ZXMoZ2V0U3RhdGVzKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldFN0YXRlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZTogJ2xhYicsXHJcbiAgICAgICAgICAgICAgICBjb25maWc6IHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6ICcvbGFiJyxcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9sYWIvbGFiLnZpZXcuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0xhYkNvbnRyb2xsZXInLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ2xhYlZtJyxcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0RvWW91ckJlYXV0eSAtIExhYidcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn0pKCk7XHJcbiIsIihmdW5jdGlvbigpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyLm1vZHVsZSgnYXBwLmxheW91dCcpXHJcbiAgICAgICAgICAuY29udHJvbGxlcignSGVhZGVyQ29udHJvbGxlcicsIEhlYWRlckNvbnRyb2xsZXIpO1xyXG5cclxuICAgIEhlYWRlckNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJ107XHJcblxyXG4gICAgLyogQG5nSW5qZWN0ICovXHJcbiAgICBmdW5jdGlvbiBIZWFkZXJDb250cm9sbGVyKCRzY29wZSkge1xyXG4gICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgfVxyXG5cclxufSkoKTtcclxuIiwiKGZ1bmN0aW9uKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhcHAubGFiLmF0dHJpYnV0ZXMnKVxyXG4gICAgICAgIC5jb250cm9sbGVyKCdBdHRyaWJ1dGVzQ29udHJvbGxlcicsIEF0dHJpYnV0ZXNDb250cm9sbGVyKTtcclxuXHJcbiAgICBBdHRyaWJ1dGVzQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJHN0YXRlJywgJ3Ntb290aFNjcm9sbCcsICckZmlsdGVyJywgJyR3aW5kb3cnLCAnJGRvY3VtZW50J107XHJcbiAgICAvKiBAbmdJbmplY3QgKi9cclxuICAgIGZ1bmN0aW9uIEF0dHJpYnV0ZXNDb250cm9sbGVyKCRzY29wZSwgJHN0YXRlLCBzbW9vdGhTY3JvbGwsICRmaWx0ZXIsICR3aW5kb3csICRkb2N1bWVudCkge1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgdm0ucHJvZHVjdCA9IG51bGw7XHJcbiAgICAgICAgdm0uYXR0cmlidXRlcyA9IFtdO1xyXG4gICAgICAgIHZtLmdldEZvcm0gPSBnZXRGb3JtO1xyXG4gICAgICAgIHZtLmdldFJlc3VsdFZpZXcgPSBnZXRSZXN1bHRWaWV3O1xyXG4gICAgICAgIHZtLmNob2ljZVZhbGlkYXRlID0gY2hvaWNlVmFsaWRhdGU7XHJcbiAgICAgICAgdm0ucmVuZGVyID0gcmVuZGVyO1xyXG4gICAgICAgIHZtLmdvVG9OZXh0ID0gZ29Ub05leHQ7XHJcblxyXG4gICAgICAgICR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCBjaGVja1Bvcyk7XHJcblxyXG4gICAgICAgIGFjdGl2YXRlKCk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xyXG4gICAgICAgICAgaWYgKHR5cGVvZiAkc2NvcGUubGFiVm0uY2hvaWNlcy5wcm9kdWN0ID09PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgICRzdGF0ZS5nbygnbGFiLnByb2R1Y3RzJyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHZtLnByb2R1Y3QgPSAkc2NvcGUubGFiVm0uY2hvaWNlcy5wcm9kdWN0O1xyXG4gICAgICAgICAgdm0uYXR0cmlidXRlcyA9ICRmaWx0ZXIoJ29yZGVyQnknKSh2bS5wcm9kdWN0LmF0dHJpYnV0ZXMsICdvcmRlcicpO1xyXG4gICAgICAgICAgdm0uY3VycmVudCA9IHZtLmF0dHJpYnV0ZXNbMF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRGb3JtKGF0dHJpYnV0ZSkge1xyXG4gICAgICAgICAgcmV0dXJuIFwiYXBwL2xhYi9hdHRyaWJ1dGVzL2Zvcm1zL1wiICsgYXR0cmlidXRlLmZvcm0gKyBcIi9cIiArICBhdHRyaWJ1dGUuZm9ybSArIFwiLnZpZXcuaHRtbFwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0UmVzdWx0Vmlldyhwcm9kdWN0KSB7XHJcbiAgICAgICAgICByZXR1cm4gXCJhcHAvbGFiL2F0dHJpYnV0ZXMvcmVzdWx0cy9cIiArIHByb2R1Y3QubmFtZSArIFwiL1wiICsgcHJvZHVjdC5uYW1lICsgXCIudmlldy5odG1sXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBjaG9pY2VWYWxpZGF0ZShhdHRyaWJ1dGUpIHtcclxuICAgICAgICAgIHJldHVybiB0eXBlb2YgJHNjb3BlLmxhYlZtLmNob2ljZXNbYXR0cmlidXRlLm5hbWVdICE9PSBcInVuZGVmaW5lZFwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gY2hlY2tQb3MoZSkge1xyXG4gICAgICAgICAgdmFyIGkgPSB2bS5hdHRyaWJ1dGVzLmxlbmd0aDtcclxuICAgICAgICAgIHZhciBub3RGb3VuZCA9IHRydWU7XHJcbiAgICAgICAgICB3aGlsZSAoaSA+IDAgJiYgbm90Rm91bmQpIHtcclxuICAgICAgICAgICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHZtLmF0dHJpYnV0ZXNbaS0xXS5uYW1lKSAmJiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh2bS5hdHRyaWJ1dGVzW2ktMV0ubmFtZSkub2Zmc2V0VG9wIC0gMjAwIDw9ICR3aW5kb3cucGFnZVlPZmZzZXQpIHtcclxuICAgICAgICAgICAgICB2bS5jdXJyZW50ID0gdm0uYXR0cmlidXRlc1tpLTFdO1xyXG4gICAgICAgICAgICAgIG5vdEZvdW5kID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGktLTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJlbmRlcihhdHRyaWJ1dGUpIHtcclxuICAgICAgICAgIGlmIChhdHRyaWJ1dGUubmFtZSAhPT0gdm0uY3VycmVudC5uYW1lKSB7XHJcbiAgICAgICAgICAgIGdvVG8oZG9jdW1lbnQucXVlcnlTZWxlY3RvcignIycgKyBhdHRyaWJ1dGUubmFtZSkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ29Ub05leHQoY3VycmVudCkge1xyXG4gICAgICAgICAgdmFyIG5leHRFbG1udCA9IGFuZ3VsYXIuZWxlbWVudChjdXJyZW50KS5uZXh0KCk7XHJcbiAgICAgICAgICBnb1RvKG5leHRFbG1udFswXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnb1RvKGVsbW50KSB7XHJcbiAgICAgICAgICBzbW9vdGhTY3JvbGwoZWxtbnQsIHtcclxuICAgICAgICAgICAgIG9mZnNldDogMTgwLFxyXG4gICAgICAgICAgICAgZHVyYXRpb246IDEwMDAsXHJcbiAgICAgICAgICAgICBlYXNpbmc6ICdlYXNlT3V0Q3ViaWMnXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRzY29wZS4kb24oXCIkZGVzdHJveVwiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCBjaGVja1Bvcyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG59KSgpO1xyXG4iLCIoZnVuY3Rpb24oKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FwcC5sYWIuYXR0cmlidXRlcycpXHJcbiAgICAgICAgLnJ1bihhcHBSdW4pO1xyXG5cclxuICAgIGFwcFJ1bi4kaW5qZWN0ID0gWydyb3V0ZXJIZWxwZXInXTtcclxuICAgIC8qIEBuZ0luamVjdCAqL1xyXG4gICAgZnVuY3Rpb24gYXBwUnVuKHJvdXRlckhlbHBlcikge1xyXG4gICAgICAgIHJvdXRlckhlbHBlci5jb25maWd1cmVTdGF0ZXMoZ2V0U3RhdGVzKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldFN0YXRlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZTogJ2xhYi5hdHRyaWJ1dGVzJyxcclxuICAgICAgICAgICAgICAgIGNvbmZpZzoge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogJy9hdHRyaWJ1dGVzJyxcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0RvWW91ckJlYXV0eSAtIGF0dHJpYnV0ZXMnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdBdHRyaWJ1dGVzQ29udHJvbGxlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAnYXR0cmlidXRlc1ZtJyxcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9sYWIvYXR0cmlidXRlcy9hdHRyaWJ1dGVzLnZpZXcuaHRtbCdcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn0pKCk7XHJcbiIsIihmdW5jdGlvbigpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwLmxhYi5wcm9kdWN0cycpXHJcbiAgICAgICAgLmNvbnRyb2xsZXIoJ1Byb2R1Y3RzQ29udHJvbGxlcicsIFByb2R1Y3RzQ29udHJvbGxlcik7XHJcblxyXG4gICAgUHJvZHVjdHNDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckc3RhdGUnLCAnZGF0YXNlcnZpY2UnXTtcclxuXHJcbiAgICAvKiBAbmdJbmplY3QgKi9cclxuICAgIGZ1bmN0aW9uIFByb2R1Y3RzQ29udHJvbGxlcigkc2NvcGUsICRzdGF0ZSwgZGF0YXNlcnZpY2UpIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG5cclxuICAgICAgICB2bS5zZWxlY3QgPSBzZWxlY3Q7XHJcblxyXG4gICAgICAgIGFjdGl2YXRlKCk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xyXG4gICAgICAgICAgZGF0YXNlcnZpY2UucmVhZHkoKS50aGVuKGdldFByb2R1Y3RzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFByb2R1Y3RzKCkge1xyXG4gICAgICAgICAgdm0ucHJvZHVjdHMgPSBkYXRhc2VydmljZS5nZXRQcm9kdWN0cygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc2VsZWN0KHByb2R1Y3QpIHtcclxuICAgICAgICAgICRzY29wZS5sYWJWbS5jaG9pY2VzLnByb2R1Y3QgPSBwcm9kdWN0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn0pKCk7XHJcbiIsIihmdW5jdGlvbigpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwLmxhYi5wcm9kdWN0cycpXHJcbiAgICAgICAgLnJ1bihhcHBSdW4pO1xyXG5cclxuICAgIGFwcFJ1bi4kaW5qZWN0ID0gWydyb3V0ZXJIZWxwZXInXTtcclxuICAgIC8qIEBuZ0luamVjdCAqL1xyXG4gICAgZnVuY3Rpb24gYXBwUnVuKHJvdXRlckhlbHBlcikge1xyXG4gICAgICAgIHJvdXRlckhlbHBlci5jb25maWd1cmVTdGF0ZXMoZ2V0U3RhdGVzKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldFN0YXRlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZTogJ2xhYi5wcm9kdWN0cycsXHJcbiAgICAgICAgICAgICAgICBjb25maWc6IHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6ICcvcHJvZHVjdHMnLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnRG9Zb3VyQmVhdXR5IC0gcHJvZHVjdHMnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdQcm9kdWN0c0NvbnRyb2xsZXInLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3Byb2R1Y3RzVm0nLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL2xhYi9wcm9kdWN0cy9wcm9kdWN0cy52aWV3Lmh0bWwnXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59KSgpO1xyXG4iLCIoZnVuY3Rpb24oKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FwcC5sYWIuYXR0cmlidXRlcycpXHJcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0J0blJhZGlvQ29udHJvbGxlcicsIEJ0blJhZGlvQ29udHJvbGxlcik7XHJcblxyXG4gICAgQnRuUmFkaW9Db250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckZmlsdGVyJ107XHJcblxyXG4gICAgLyogQG5nSW5qZWN0ICovXHJcbiAgICBmdW5jdGlvbiBCdG5SYWRpb0NvbnRyb2xsZXIoJHNjb3BlLCAkZmlsdGVyKSB7XHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS5jaG9pY2UgPSBudWxsO1xyXG4gICAgICAgIHZtLmltZ1ByZXZpZXcgPSBudWxsO1xyXG4gICAgICAgIHZtLnNldENob2ljZSA9IHNldENob2ljZTtcclxuICAgICAgICB2bS5zZXRJbWdQcmV2aWV3ID0gc2V0SW1nUHJldmlldztcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc2V0Q2hvaWNlKGF0dHJpYnV0ZUNob2ljZWQpIHtcclxuICAgICAgICAgIHZtLmNob2ljZSA9IGF0dHJpYnV0ZUNob2ljZWQ7XHJcbiAgICAgICAgICAkc2NvcGUubGFiVm0uY2hvaWNlc1t2bS5hdHRyaWJ1dGUubmFtZV0gPSBhdHRyaWJ1dGVDaG9pY2VkO1xyXG4gICAgICAgICAgc2V0SW1nUHJldmlldyh2bS5jaG9pY2UuaW1nKTtcclxuXHJcbiAgICAgICAgICAkc2NvcGUuYXR0cmlidXRlc1ZtLmdvVG9OZXh0KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyMnICsgdm0uYXR0cmlidXRlLm5hbWUpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNldEltZ1ByZXZpZXcoaW1nKSB7XHJcbiAgICAgICAgICBpZiAodm0uYXR0cmlidXRlLmhhdmVJbWdQcmV2aWV3KSB7XHJcbiAgICAgICAgICAgIHZtLmltZ1ByZXZpZXcgPSBpbWc7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufSkoKTtcclxuIiwiKGZ1bmN0aW9uKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhcHAubGFiLmF0dHJpYnV0ZXMnKVxyXG4gICAgICAgIC5jb250cm9sbGVyKCdDb2xvckNvbnRyb2xsZXInLCBDb2xvckNvbnRyb2xsZXIpO1xyXG5cclxuICAgIENvbG9yQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnXTtcclxuXHJcbiAgICAvKiBAbmdJbmplY3QgKi9cclxuICAgIGZ1bmN0aW9uIENvbG9yQ29udHJvbGxlcigkc2NvcGUpIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgdm0uY2hvaWNlID0gbnVsbDtcclxuICAgICAgICB2bS5zZXRDaG9pY2UgPSBzZXRDaG9pY2U7XHJcbiAgICAgICAgdm0uc2V0T3BhY2l0eSA9IHNldE9wYWNpdHk7XHJcbiAgICAgICAgdm0uc2F2ZUNob2ljZSA9IHNhdmVDaG9pY2U7XHJcbiAgICAgICAgdm0ucGVyY2VudCA9IDEwMDtcclxuXHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNldENob2ljZShhdHRyaWJ1dGVDaG9pY2VkKSB7XHJcbiAgICAgICAgICBpZiAodm0uY2hvaWNlKSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmb3JtLWNvbG9yLScgKyB2bS5jaG9pY2UpLnN0eWxlLm9wYWNpdHkgPSAxO1xyXG4gICAgICAgICAgICB2bS5wZXJjZW50ID0gMTAwO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdm0uY2hvaWNlID0gYXR0cmlidXRlQ2hvaWNlZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNhdmVDaG9pY2UoKSB7XHJcbiAgICAgICAgICAkc2NvcGUubGFiVm0uY2hvaWNlc1t2bS5hdHRyaWJ1dGUubmFtZV0gPSB7dmFsdWU6IHZtLmNob2ljZSwgcGVyY2VudDogdm0ucGVyY2VudH07XHJcbiAgICAgICAgICAkc2NvcGUuYXR0cmlidXRlc1ZtLmdvVG9OZXh0KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyMnICsgdm0uYXR0cmlidXRlLm5hbWUpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNldE9wYWNpdHkoKSB7XHJcbiAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZm9ybS1jb2xvci0nICsgdm0uY2hvaWNlKS5zdHlsZS5vcGFjaXR5ID0gdm0ucGVyY2VudCAvIDEwMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxufSkoKTtcclxuIiwiKGZ1bmN0aW9uKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhcHAubGFiLmF0dHJpYnV0ZXMnKVxyXG4gICAgICAgIC5jb250cm9sbGVyKCdDaGVja2JveENvbnRyb2xsZXInLCBDaGVja2JveENvbnRyb2xsZXIpO1xyXG5cclxuICAgIENoZWNrYm94Q29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnXTtcclxuXHJcbiAgICAvKiBAbmdJbmplY3QgKi9cclxuICAgIGZ1bmN0aW9uIENoZWNrYm94Q29udHJvbGxlcigkc2NvcGUpIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLmNob2ljZXMgPSBbXTtcclxuICAgICAgICB2bS5leGlzdHMgPSBleGlzdHM7XHJcbiAgICAgICAgdm0udG9nZ2xlID0gdG9nZ2xlO1xyXG4gICAgICAgIHZtLnNhdmVDaG9pY2VzID0gc2F2ZUNob2ljZXM7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGV4aXN0cyh2YWx1ZSkge1xyXG4gICAgICAgICAgcmV0dXJuIHZtLmNob2ljZXMuaW5kZXhPZih2YWx1ZSkgPiAtMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHRvZ2dsZSh2YWx1ZSkge1xyXG4gICAgICAgICAgdmFyIGlkeCA9IHZtLmNob2ljZXMuaW5kZXhPZih2YWx1ZSk7XHJcbiAgICAgICAgICBpZiAoaWR4ID4gLTEpIHtcclxuICAgICAgICAgICAgdm0uY2hvaWNlcy5zcGxpY2UoaWR4LCAxKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZtLmNob2ljZXMucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc2F2ZUNob2ljZXMoKSB7XHJcbiAgICAgICAgICAkc2NvcGUubGFiVm0uY2hvaWNlc1t2bS5hdHRyaWJ1dGUubmFtZV0gPSB2bS5jaG9pY2VzO1xyXG4gICAgICAgICAgJHNjb3BlLmF0dHJpYnV0ZXNWbS5nb1RvTmV4dChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjJyArIHZtLmF0dHJpYnV0ZS5uYW1lKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbn0pKCk7XHJcbiIsIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGFuZ3VsYXJcclxuICAgICAgLm1vZHVsZSgnYXBwLmxhYi5hdHRyaWJ1dGVzJylcclxuICAgICAgLmNvbnRyb2xsZXIoJ0ltZ1JhZGlvQ29udHJvbGxlcicsIEltZ1JhZGlvQ29udHJvbGxlcik7XHJcblxyXG4gIEltZ1JhZGlvQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnXTtcclxuXHJcbiAgLyogQG5nSW5qZWN0ICovXHJcbiAgZnVuY3Rpb24gSW1nUmFkaW9Db250cm9sbGVyKCRzY29wZSkge1xyXG4gICAgdmFyIHZtID0gdGhpcztcclxuICAgIHZtLmNob2ljZSA9IG51bGw7XHJcbiAgICB2bS5zZXRDaG9pY2UgPSBzZXRDaG9pY2U7XHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIHNldENob2ljZShhdHRyaWJ1dGVDaG9pY2VkKSB7XHJcbiAgICAgIHZtLmNob2ljZSA9IGF0dHJpYnV0ZUNob2ljZWQ7XHJcbiAgICAgICRzY29wZS5sYWJWbS5jaG9pY2VzW3ZtLmF0dHJpYnV0ZS5uYW1lXSA9IGF0dHJpYnV0ZUNob2ljZWQ7XHJcbiAgICAgICRzY29wZS5hdHRyaWJ1dGVzVm0uZ29Ub05leHQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignIycgKyB2bS5hdHRyaWJ1dGUubmFtZSkpO1xyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG59KSgpO1xyXG4iLCIoZnVuY3Rpb24oKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FwcC5sYWIuYXR0cmlidXRlcycpXHJcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0lucHV0VGV4dENvbnRyb2xsZXInLCBJbnB1dFRleHRDb250cm9sbGVyKTtcclxuXHJcbiAgICBJbnB1dFRleHRDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZSddO1xyXG5cclxuICAgIC8qIEBuZ0luamVjdCAqL1xyXG4gICAgZnVuY3Rpb24gSW5wdXRUZXh0Q29udHJvbGxlcigkc2NvcGUpIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZtLmNob2ljZSA9IG51bGw7XHJcbiAgICAgICAgdm0uc2V0Q2hvaWNlID0gc2V0Q2hvaWNlO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBzZXRDaG9pY2UoKSB7XHJcbiAgICAgICAgICBpZiAodm0uY2hvaWNlICE9PSBcIlwiICYmIHZtLmNob2ljZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAkc2NvcGUubGFiVm0uY2hvaWNlc1t2bS5hdHRyaWJ1dGUubmFtZV0gPSB2bS5jaG9pY2U7XHJcbiAgICAgICAgICAgICRzY29wZS5hdHRyaWJ1dGVzVm0uZ29Ub05leHQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignIycgKyB2bS5hdHRyaWJ1dGUubmFtZSkpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZGVsZXRlICRzY29wZS5sYWJWbS5jaG9pY2VzW3ZtLmF0dHJpYnV0ZS5uYW1lXTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59KSgpO1xyXG4iLCIoZnVuY3Rpb24oKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FwcC5sYWIuYXR0cmlidXRlcycpXHJcbiAgICAgICAgLmNvbnRyb2xsZXIoJ1JhZGlvU2xpZGVyQ29udHJvbGxlcicsIFJhZGlvU2xpZGVyQ29udHJvbGxlcik7XHJcblxyXG4gICAgUmFkaW9TbGlkZXJDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZSddO1xyXG5cclxuICAgIC8qIEBuZ0luamVjdCAqL1xyXG4gICAgZnVuY3Rpb24gUmFkaW9TbGlkZXJDb250cm9sbGVyKCRzY29wZSkge1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2bS5jaG9pY2UgPSBudWxsO1xyXG4gICAgICAgIHZtLnNldENob2ljZSA9IHNldENob2ljZTtcclxuICAgICAgICB2bS5zYXZlQ2hvaWNlID0gc2F2ZUNob2ljZTtcclxuICAgICAgICB2bS5wZXJjZW50ID0gMTAwO1xyXG5cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc2V0Q2hvaWNlKGF0dHJpYnV0ZUNob2ljZWQpIHtcclxuICAgICAgICAgIGlmICh2bS5jaG9pY2UpIHtcclxuICAgICAgICAgICAgdm0ucGVyY2VudCA9IDEwMDtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHZtLmNob2ljZSA9IGF0dHJpYnV0ZUNob2ljZWQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBzYXZlQ2hvaWNlKCkge1xyXG4gICAgICAgICAgJHNjb3BlLmxhYlZtLmNob2ljZXNbdm0uYXR0cmlidXRlLm5hbWVdID0ge3ZhbHVlOiB2bS5jaG9pY2UsIHBlcmNlbnQ6IHZtLnBlcmNlbnR9O1xyXG4gICAgICAgICAgJHNjb3BlLmF0dHJpYnV0ZXNWbS5nb1RvTmV4dChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjJyArIHZtLmF0dHJpYnV0ZS5uYW1lKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufSkoKTtcclxuIiwiKGZ1bmN0aW9uKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhcHAubGFiLmF0dHJpYnV0ZXMnKVxyXG4gICAgICAgIC5jb250cm9sbGVyKCdDcmVhbUNvbnRyb2xsZXInLCBDcmVhbUNvbnRyb2xsZXIpO1xyXG5cclxuICAgIENyZWFtQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnXTtcclxuXHJcbiAgICAvKiBAbmdJbmplY3QgKi9cclxuICAgIGZ1bmN0aW9uIENyZWFtQ29udHJvbGxlcigkc2NvcGUpIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxufSkoKTtcclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
