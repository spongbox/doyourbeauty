!function(){"use strict";angular.module("app",["app.core","app.lab","app.homepage","app.layout"])}(),function(){"use strict";angular.module("app.core",["ngAnimate","ngSanitize","blocks.exception","blocks.logger","blocks.router","ui.router","ngMaterial","duScroll"])}(),function(){"use strict";function t(t,e,r){t.debugEnabled&&t.debugEnabled(!0),r.configure(o.appErrorPrefix),e.configure({docTitle:o.appTitle+": "})}var e=angular.module("app.core"),o={appErrorPrefix:"[<%= appName %> Error] ",appTitle:"<%= appName %>"};e.value("config",o),e.config(t),t.$inject=["$logProvider","routerHelperProvider","exceptionHandlerProvider"]}(),function(){"use strict";function t(t){var o="/404";t.configureStates(e(),o)}function e(){return[{state:"404",config:{url:"/404",templateUrl:"app/core/404.html",title:"404"}}]}t.$inject=["routerHelper"],angular.module("app.core").run(t)}(),function(){"use strict";function t(t,e,o,r){function n(){return a.products}function c(){return i.then(function(t){return a=t.data,!0},function(){return r.error("Impossible de récupérer les données"),!1})}var u="/ressources/products.json",i=t.get(u),a=null,l={ready:c,getProducts:n};return l}angular.module("app.core").factory("dataservice",t),t.$inject=["$http","$q","exception","logger"]}(),function(){"use strict";function t(){return function(t,e){for(var o=0,r=t.length;r>o;o++)if(t[o].value==e||t[o].name==e)return t[o];return null}}angular.module("app.core").filter("getByName",t)}(),function(){"use strict";angular.module("blocks.exception",["blocks.logger"])}(),function(){"use strict";angular.module("blocks.logger",[])}(),function(){"use strict";angular.module("blocks.router",["ui.router","blocks.logger"])}(),function(){"use strict";function t(){this.config={appErrorPrefix:void 0},this.configure=function(t){this.config.appErrorPrefix=t},this.$get=function(){return{config:this.config}}}function e(t){t.decorator("$exceptionHandler",o)}function o(t,e,o){return function(r,n){var c=e.config.appErrorPrefix||"",u={exception:r,cause:n};r.message=c+r.message,t(r,n),o.error(r.message,u)}}angular.module("blocks.exception").provider("exceptionHandler",t).config(e),e.$inject=["$provide"],o.$inject=["$delegate","exceptionHandler","logger"]}(),function(){"use strict";function t(t,e){function o(o){return function(r){var n,c;return r.data&&r.data.description&&(n="\n"+r.data.description,c=o+n),r.data.description=c,e.error(c),t.reject(r)}}var r={catcher:o};return r}t.$inject=["$q","logger"],angular.module("blocks.exception").factory("exception",t)}(),function(){"use strict";function t(t,e){function o(e,o,r){console.error(e,r),t.error("Error: "+e,o)}function r(e,o,r){console.info(e,r),t.info("Info: "+e,o)}function n(e,o,r){console.log(e,r),t.info("Success: "+e,o)}function c(e,o,r){console.warn(e,r),t.warn("Warning: "+e,o)}var u={error:o,info:r,success:n,warning:c,log:t.log};return u}angular.module("blocks.logger").factory("logger",t),t.$inject=["$log"]}(),function(){"use strict";function t(t,e,o){function r(t,r,c,u){function i(t,r){t.forEach(function(t){t.config.resolve=angular.extend(t.config.resolve||{},n.resolveAlways),e.state(t.state,t.config)}),r&&!g&&(g=!0,o.otherwise(r))}function a(){r.$on("$stateChangeError",function(e,o,r,n,c,i){if(!f){d.errors++,f=!0;var a=o&&(o.title||o.name||o.loadedTemplateUrl)||"unknown target",l="Error routing to "+a+". "+(i.data||"")+". <br/>"+(i.statusText||"")+": "+(i.status||"");u.warning(l,[o]),t.path("/")}})}function l(){a(),p()}function s(){return c.get()}function p(){r.$on("$stateChangeSuccess",function(t,e,o,c,u){d.changes++,f=!1;var i=n.docTitle+" "+(e.title||"");r.title=i})}var f=!1,g=!1,d={errors:0,changes:0},m={configureStates:i,getStates:s,stateCounts:d};return l(),m}var n={docTitle:void 0,resolveAlways:{}};t.html5Mode({enabled:!1,requireBase:!1}),this.configure=function(t){angular.extend(n,t)},this.$get=r,r.$inject=["$location","$rootScope","$state","logger"]}angular.module("blocks.router").provider("routerHelper",t),t.$inject=["$locationProvider","$stateProvider","$urlRouterProvider"]}(),function(){"use strict";angular.module("app.lab.attributes",["app.core"])}(),function(){angular.module("app.lab.products",["app.core"])}(),function(){"use strict";angular.module("app.homepage",["app.core"])}(),function(){angular.module("app.lab",["app.core","app.lab.products","app.lab.attributes"])}(),function(){"use strict";angular.module("app.layout",["app.core"])}(),function(){"use strict";function t(){var t=this;t.title="Homepage"}angular.module("app.homepage").controller("HomeController",t)}(),function(){"use strict";function t(t){t.configureStates(e())}function e(){return[{state:"homepage",config:{url:"/",templateUrl:"app/homepage/homepage.view.html",controller:"HomeController",controllerAs:"home",title:"DoYourBeauty"}}]}angular.module("app.homepage").run(t),t.$inject=["routerHelper"]}(),function(){"use strict";function t(t){var e=this;e.choices={}}angular.module("app.lab").controller("LabController",t),t.$inject=["$scope"]}(),function(){"use strict";function t(t){t.configureStates(e())}function e(){return[{state:"lab",config:{url:"/lab",templateUrl:"app/lab/lab.view.html",controller:"LabController",controllerAs:"labVm",title:"DoYourBeauty - Lab"}}]}angular.module("app.lab").run(t),t.$inject=["routerHelper"]}(),function(){"use strict";function t(t){}angular.module("app.layout").controller("HeaderController",t),t.$inject=["$scope"]}(),function(){"use strict";function t(t,e,o,r,n){function c(){return"undefined"==typeof t.labVm.choices.product?void e.go("lab.products"):(g.product=t.labVm.choices.product,g.attributes=o("orderBy")(g.product.attributes,"order"),void(g.current=g.attributes[0]))}function u(t){return"app/lab/attributes/forms/"+t.form+"/"+t.form+".view.html"}function i(t){return"app/lab/attributes/results/"+t.name+"/"+t.name+".view.html"}function a(e){return"undefined"!=typeof t.labVm.choices[e.name]}function l(e){for(var o=g.attributes.length,n=!0;o>0&&n;)document.getElementById(g.attributes[o-1].name)&&document.getElementById(g.attributes[o-1].name).offsetTop-200<=r.pageYOffset&&(g.current=g.attributes[o-1],n=!1,t.$apply()),o--}function s(t){t.name!==g.current.name&&f(document.querySelector("#"+t.name))}function p(t){var e=angular.element(t).next();f(e[0])}function f(t){n.scrollToElement(t,180,1e3)}var g=this;g.product=null,g.attributes=[],g.getForm=u,g.getResultView=i,g.choiceValidate=a,g.render=s,g.goToNext=p,r.addEventListener("scroll",l),c(),t.$on("$destroy",function(){r.removeEventListener("scroll",l)})}angular.module("app.lab.attributes").controller("AttributesController",t),t.$inject=["$scope","$state","$filter","$window","$document"]}(),function(){"use strict";function t(t){t.configureStates(e())}function e(){return[{state:"lab.attributes",config:{url:"/attributes",title:"DoYourBeauty - attributes",controller:"AttributesController",controllerAs:"attributesVm",templateUrl:"app/lab/attributes/attributes.view.html"}}]}angular.module("app.lab.attributes").run(t),t.$inject=["routerHelper"]}(),function(){"use strict";function t(t,e,o){function r(){o.ready().then(n)}function n(){u.products=o.getProducts()}function c(e){t.labVm.choices.product=e}var u=this;u.select=c,r()}angular.module("app.lab.products").controller("ProductsController",t),t.$inject=["$scope","$state","dataservice"]}(),function(){"use strict";function t(t){t.configureStates(e())}function e(){return[{state:"lab.products",config:{url:"/products",title:"DoYourBeauty - products",controller:"ProductsController",controllerAs:"productsVm",templateUrl:"app/lab/products/products.view.html"}}]}angular.module("app.lab.products").run(t),t.$inject=["routerHelper"]}(),function(){"use strict";function t(t){}angular.module("app.lab.attributes").controller("CreamController",t),t.$inject=["$scope"]}(),function(){"use strict";function t(t,e){function o(e){n.choice=e,t.labVm.choices[n.attribute.name]=e,r(n.choice.img),t.attributesVm.goToNext(document.querySelector("#"+n.attribute.name))}function r(t){n.attribute.haveImgPreview&&(n.imgPreview=t)}var n=this;n.choice=null,n.imgPreview=null,n.setChoice=o,n.setImgPreview=r}angular.module("app.lab.attributes").controller("BtnRadioController",t),t.$inject=["$scope","$filter"]}(),function(){"use strict";function t(t){function e(t){return n.choices.indexOf(t)>-1}function o(t){var e=n.choices.indexOf(t);e>-1?n.choices.splice(e,1):n.choices.push(t)}function r(){t.labVm.choices[n.attribute.name]=n.choices,t.attributesVm.goToNext(document.querySelector("#"+n.attribute.name))}var n=this;n.choices=[],n.exists=e,n.toggle=o,n.saveChoices=r}angular.module("app.lab.attributes").controller("CheckboxController",t),t.$inject=["$scope"]}(),function(){"use strict";function t(t){function e(t){n.choice&&(document.getElementById("form-color-"+n.choice).style.opacity=1,n.percent=100),n.choice=t}function o(){t.labVm.choices[n.attribute.name]={value:n.choice,percent:n.percent},t.attributesVm.goToNext(document.querySelector("#"+n.attribute.name))}function r(){document.getElementById("form-color-"+n.choice).style.opacity=n.percent/100}var n=this,n=this;n.choice=null,n.setChoice=e,n.setOpacity=r,n.saveChoice=o,n.percent=100}angular.module("app.lab.attributes").controller("ColorController",t),t.$inject=["$scope"]}(),function(){"use strict";function t(t){function e(e){o.choice=e,t.labVm.choices[o.attribute.name]=e,t.attributesVm.goToNext(document.querySelector("#"+o.attribute.name))}var o=this;o.choice=null,o.setChoice=e}angular.module("app.lab.attributes").controller("ImgRadioController",t),t.$inject=["$scope"]}(),function(){"use strict";function t(t){function e(t){r.choice&&(r.percent=100),r.choice=t}function o(){t.labVm.choices[r.attribute.name]={value:r.choice,percent:r.percent},t.attributesVm.goToNext(document.querySelector("#"+r.attribute.name))}var r=this,r=this;r.choice=null,r.setChoice=e,r.saveChoice=o,r.percent=100}angular.module("app.lab.attributes").controller("RadioSliderController",t),t.$inject=["$scope"]}(),function(){"use strict";function t(t){function e(){""!==o.choice&&null!==o.choice?(t.labVm.choices[o.attribute.name]=o.choice,t.attributesVm.goToNext(document.querySelector("#"+o.attribute.name))):delete t.labVm.choices[o.attribute.name]}var o=this;o.choice=null,o.setChoice=e}angular.module("app.lab.attributes").controller("InputTextController",t),t.$inject=["$scope"]}();
//# sourceMappingURL=data:application/json;base64,
