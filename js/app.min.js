!function(){"use strict";angular.module("app",["app.core","app.lab","app.homepage","app.layout"])}(),function(){"use strict";angular.module("app.core",["ngAnimate","ngSanitize","blocks.exception","blocks.logger","blocks.router","ui.router","ngMaterial"])}(),function(){"use strict";function t(t,e,o){t.debugEnabled&&t.debugEnabled(!0),o.configure(r.appErrorPrefix),e.configure({docTitle:r.appTitle+": "})}var e=angular.module("app.core"),r={appErrorPrefix:"[<%= appName %> Error] ",appTitle:"<%= appName %>"};e.value("config",r),e.config(t),t.$inject=["$logProvider","routerHelperProvider","exceptionHandlerProvider"]}(),function(){"use strict";function t(t){var r="/404";t.configureStates(e(),r)}function e(){return[{state:"404",config:{url:"/404",templateUrl:"app/core/404.html",title:"404"}}]}t.$inject=["routerHelper"],angular.module("app.core").run(t)}(),function(){"use strict";function t(t,e,r,o){function n(){return i.products}function c(){return a.then(function(t){return i=t.data,!0},function(){return o.error("Impossible de récupérer les données"),!1})}var u="/ressources/products.json",a=t.get(u),i=null,l={ready:c,getProducts:n};return l}angular.module("app.core").factory("dataservice",t),t.$inject=["$http","$q","exception","logger"]}(),function(){"use strict";angular.module("blocks.exception",["blocks.logger"])}(),function(){"use strict";angular.module("blocks.logger",[])}(),function(){"use strict";angular.module("blocks.router",["ui.router","blocks.logger"])}(),function(){"use strict";function t(){this.config={appErrorPrefix:void 0},this.configure=function(t){this.config.appErrorPrefix=t},this.$get=function(){return{config:this.config}}}function e(t){t.decorator("$exceptionHandler",r)}function r(t,e,r){return function(o,n){var c=e.config.appErrorPrefix||"",u={exception:o,cause:n};o.message=c+o.message,t(o,n),r.error(o.message,u)}}angular.module("blocks.exception").provider("exceptionHandler",t).config(e),e.$inject=["$provide"],r.$inject=["$delegate","exceptionHandler","logger"]}(),function(){"use strict";function t(t,e){function r(r){return function(o){var n,c;return o.data&&o.data.description&&(n="\n"+o.data.description,c=r+n),o.data.description=c,e.error(c),t.reject(o)}}var o={catcher:r};return o}t.$inject=["$q","logger"],angular.module("blocks.exception").factory("exception",t)}(),function(){"use strict";function t(t,e){function r(e,r,o){console.error(e,o),t.error("Error: "+e,r)}function o(e,r,o){console.info(e,o),t.info("Info: "+e,r)}function n(e,r,o){console.log(e,o),t.info("Success: "+e,r)}function c(e,r,o){console.warn(e,o),t.warn("Warning: "+e,r)}var u={error:r,info:o,success:n,warning:c,log:t.log};return u}angular.module("blocks.logger").factory("logger",t),t.$inject=["$log"]}(),function(){"use strict";function t(t,e,r){function o(t,o,c,u){function a(t,o){t.forEach(function(t){t.config.resolve=angular.extend(t.config.resolve||{},n.resolveAlways),e.state(t.state,t.config)}),o&&!g&&(g=!0,r.otherwise(o))}function i(){o.$on("$stateChangeError",function(e,r,o,n,c,a){if(!f){d.errors++,f=!0;var i=r&&(r.title||r.name||r.loadedTemplateUrl)||"unknown target",l="Error routing to "+i+". "+(a.data||"")+". <br/>"+(a.statusText||"")+": "+(a.status||"");u.warning(l,[r]),t.path("/")}})}function l(){i(),p()}function s(){return c.get()}function p(){o.$on("$stateChangeSuccess",function(t,e,r,c,u){d.changes++,f=!1;var a=n.docTitle+" "+(e.title||"");o.title=a})}var f=!1,g=!1,d={errors:0,changes:0},m={configureStates:a,getStates:s,stateCounts:d};return l(),m}var n={docTitle:void 0,resolveAlways:{}};t.html5Mode({enabled:!1,requireBase:!1}),this.configure=function(t){angular.extend(n,t)},this.$get=o,o.$inject=["$location","$rootScope","$state","logger"]}angular.module("blocks.router").provider("routerHelper",t),t.$inject=["$locationProvider","$stateProvider","$urlRouterProvider"]}(),function(){"use strict";angular.module("app.lab.attributes",["app.core"])}(),function(){angular.module("app.lab.products",["app.core"])}(),function(){"use strict";angular.module("app.homepage",["app.core"])}(),function(){angular.module("app.lab",["app.core","app.lab.products","app.lab.attributes"])}(),function(){"use strict";angular.module("app.layout",["app.core"])}(),function(){"use strict";function t(){var t=this;t.title="Homepage"}angular.module("app.homepage").controller("HomeController",t)}(),function(){"use strict";function t(t){t.configureStates(e())}function e(){return[{state:"homepage",config:{url:"/",templateUrl:"app/homepage/homepage.view.html",controller:"HomeController",controllerAs:"home",title:"DoYourBeauty"}}]}angular.module("app.homepage").run(t),t.$inject=["routerHelper"]}(),function(){"use strict";function t(t){var e=this;e.choices={}}angular.module("app.lab").controller("LabController",t),t.$inject=["$scope"]}(),function(){"use strict";function t(t){t.configureStates(e())}function e(){return[{state:"lab",config:{url:"/lab",templateUrl:"app/lab/lab.view.html",controller:"LabController",controllerAs:"labVm",title:"DoYourBeauty - Lab"}}]}angular.module("app.lab").run(t),t.$inject=["routerHelper"]}(),function(){"use strict";function t(t){}angular.module("app.layout").controller("HeaderController",t),t.$inject=["$scope"]}(),function(){"use strict";function t(t,e){function r(){return"undefined"==typeof t.labVm.choices.product?void e.go("lab.products"):void(c.attributes=t.labVm.choices.product.attributes)}function o(t){return"app/lab/attributes/forms/"+t.form+"/"+t.form+".view.html"}function n(e){return"undefined"!=typeof t.labVm.choices[e.name]}var c=this;c.getForm=o,c.choiceValidate=n,r()}angular.module("app.lab.attributes").controller("AttributesController",t),t.$inject=["$scope","$state"]}(),function(){"use strict";function t(t){t.configureStates(e())}function e(){return[{state:"lab.attributes",config:{url:"/attributes",title:"DoYourBeauty - attributes",controller:"AttributesController",controllerAs:"attributesVm",templateUrl:"app/lab/attributes/attributes.view.html"}}]}angular.module("app.lab.attributes").run(t),t.$inject=["routerHelper"]}(),function(){"use strict";function t(t,e,r){function o(){r.ready().then(n)}function n(){u.products=r.getProducts()}function c(r){t.labVm.choices.product=r,e.go("lab.attributes")}var u=this;u.select=c,o()}angular.module("app.lab.products").controller("ProductsController",t),t.$inject=["$scope","$state","dataservice"]}(),function(){"use strict";function t(t){t.configureStates(e())}function e(){return[{state:"lab.products",config:{url:"/products",title:"DoYourBeauty - products",controller:"ProductsController",controllerAs:"productsVm",templateUrl:"app/lab/products/products.view.html"}}]}angular.module("app.lab.products").run(t),t.$inject=["routerHelper"]}(),function(){"use strict";function t(t){function e(e){r.choice=e,t.labVm.choices[r.attribute.name]=e}var r=this;r.choice=null,r.setChoice=e}angular.module("app.lab.attributes").controller("BtnRadioController",t),t.$inject=["$scope"]}(),function(){"use strict";function t(t){function e(e){r.choice=e,t.labVm.choices[r.attribute.name]=e}var r=this;r.choice=null,r.setChoice=e}angular.module("app.lab.attributes").controller("ImgRadioController",t),t.$inject=["$scope"]}(),function(){"use strict";function t(t){function e(){""!==r.choice&&null!==r.choice?t.labVm.choices[r.attribute.name]=r.choice:delete t.labVm.choices[r.attribute.name]}var r=this;r.choice=null,r.setChoice=e}angular.module("app.lab.attributes").controller("InputTextController",t),t.$inject=["$scope"]}();
//# sourceMappingURL=data:application/json;base64,
